
rosserial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08005e40  08005e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d4  080060d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080060d4  080060d4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d4  080060d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae4  20000074  08006154  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  08006154  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167d9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a14  00000000  00000000  0003687d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00039298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003a250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d3c0  00000000  00000000  0003b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc57  00000000  00000000  000584f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa97c  00000000  00000000  0006614f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110acb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  00110b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e28 	.word	0x08005e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08005e28 	.word	0x08005e28

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	0a5a      	lsrs	r2, r3, #9
 80001fc:	490f      	ldr	r1, [pc, #60]	; (800023c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80001fe:	fba1 1202 	umull	r1, r2, r1, r2
 8000202:	09d2      	lsrs	r2, r2, #7
 8000204:	490e      	ldr	r1, [pc, #56]	; (8000240 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000206:	fb01 f202 	mul.w	r2, r1, r2
 800020a:	1a9b      	subs	r3, r3, r2
 800020c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	0a5b      	lsrs	r3, r3, #9
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000216:	fba2 2303 	umull	r2, r3, r2, r3
 800021a:	09db      	lsrs	r3, r3, #7
 800021c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	441a      	add	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	00044b83 	.word	0x00044b83
 8000240:	3b9aca00 	.word	0x3b9aca00

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f002 f986 	bl	8002558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f80d 	bl	800026a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f8ea 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000254:	f000 f8c2 	bl	80003dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000258:	f000 f890 	bl	800037c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800025c:	f000 f840 	bl	80002e0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 8000260:	f001 fa3e 	bl	80016e0 <setup>
  while (1)
  {
	  loop();
 8000264:	f001 fa4c 	bl	8001700 <loop>
  {
 8000268:	e7fc      	b.n	8000264 <main+0x20>

0800026a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	b090      	sub	sp, #64	; 0x40
 800026e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	2228      	movs	r2, #40	; 0x28
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f005 fc98 	bl	8005bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	2310      	movs	r3, #16
 8000296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	2300      	movs	r3, #0
 800029a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 fe8b 	bl	8002fbc <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ac:	f000 f8fa 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fd7f 	bl	8003dcc <HAL_RCC_ClockConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d4:	f000 f8e6 	bl	80004a4 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3740      	adds	r7, #64	; 0x40
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_TIM2_Init+0x98>)
 8000300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000306:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MX_TIM2_Init+0x98>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_TIM2_Init+0x98>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_TIM2_Init+0x98>)
 8000314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_TIM2_Init+0x98>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_TIM2_Init+0x98>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000326:	4814      	ldr	r0, [pc, #80]	; (8000378 <MX_TIM2_Init+0x98>)
 8000328:	f003 ff86 	bl	8004238 <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000332:	f000 f8b7 	bl	80004a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_TIM2_Init+0x98>)
 8000344:	f003 ffcf 	bl	80042e6 <HAL_TIM_ConfigClockSource>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800034e:	f000 f8a9 	bl	80004a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <MX_TIM2_Init+0x98>)
 8000360:	f004 f992 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800036a:	f000 f89b 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000a80 	.word	0x20000a80

0800037c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 8000382:	4a15      	ldr	r2, [pc, #84]	; (80003d8 <MX_USART2_UART_Init+0x5c>)
 8000384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 8000388:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800038c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_USART2_UART_Init+0x58>)
 80003c0:	f004 f9d0 	bl	8004764 <HAL_UART_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ca:	f000 f86b 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000acc 	.word	0x20000acc
 80003d8:	40004400 	.word	0x40004400

080003dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <MX_DMA_Init+0x48>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <MX_DMA_Init+0x48>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <MX_DMA_Init+0x48>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	2010      	movs	r0, #16
 8000400:	f002 fa0d 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000404:	2010      	movs	r0, #16
 8000406:	f002 fa26 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	2011      	movs	r0, #17
 8000410:	f002 fa05 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000414:	2011      	movs	r0, #17
 8000416:	f002 fa1e 	bl	8002856 <HAL_NVIC_EnableIRQ>

}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_GPIO_Init+0x78>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <MX_GPIO_Init+0x78>)
 8000444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <MX_GPIO_Init+0x78>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <MX_GPIO_Init+0x78>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <MX_GPIO_Init+0x78>)
 800045c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_GPIO_Init+0x78>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2103      	movs	r1, #3
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f002 fd89 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800047a:	2303      	movs	r3, #3
 800047c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	4619      	mov	r1, r3
 8000490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000494:	f002 fc08 	bl	8002ca8 <HAL_GPIO_Init>

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004aa:	e7fe      	b.n	80004aa <Error_Handler+0x6>

080004ac <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
	...

080004d0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN3ros3MsgC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800608c 	.word	0x0800608c

080004f0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
      data()
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ffe8 	bl	80004d0 <_ZN3ros3MsgC1Ev>
 8000500:	4a06      	ldr	r2, [pc, #24]	; (800051c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3304      	adds	r3, #4
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ffce 	bl	80004ac <_ZN3ros4TimeC1Ev>
    {
    }
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	08006074 	.word	0x08006074

08000520 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6859      	ldr	r1, [r3, #4]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	4413      	add	r3, r2
 8000538:	b2ca      	uxtb	r2, r1
 800053a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	0a19      	lsrs	r1, r3, #8
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	b2ca      	uxtb	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	0c19      	lsrs	r1, r3, #16
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3302      	adds	r3, #2
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	4413      	add	r3, r2
 800055c:	b2ca      	uxtb	r2, r1
 800055e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	0e19      	lsrs	r1, r3, #24
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3303      	adds	r3, #3
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	4413      	add	r3, r2
 800056e:	b2ca      	uxtb	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3304      	adds	r3, #4
 8000576:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6899      	ldr	r1, [r3, #8]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	4413      	add	r3, r2
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	0a19      	lsrs	r1, r3, #8
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	4413      	add	r3, r2
 8000594:	b2ca      	uxtb	r2, r1
 8000596:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	0c19      	lsrs	r1, r3, #16
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3302      	adds	r3, #2
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	0e19      	lsrs	r1, r3, #24
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3303      	adds	r3, #3
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	b2ca      	uxtb	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3304      	adds	r3, #4
 80005c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80005c2:	68fb      	ldr	r3, [r7, #12]
    }
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	440b      	add	r3, r1
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	431a      	orrs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3302      	adds	r3, #2
 800060a:	6839      	ldr	r1, [r7, #0]
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	431a      	orrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3303      	adds	r3, #3
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	440b      	add	r3, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3304      	adds	r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	440b      	add	r3, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	431a      	orrs	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3302      	adds	r3, #2
 8000660:	6839      	ldr	r1, [r7, #0]
 8000662:	440b      	add	r3, r1
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	041b      	lsls	r3, r3, #16
 8000668:	431a      	orrs	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3303      	adds	r3, #3
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	440b      	add	r3, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	061b      	lsls	r3, r3, #24
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3304      	adds	r3, #4
 8000688:	60fb      	str	r3, [r7, #12]
     return offset;
 800068a:	68fb      	ldr	r3, [r7, #12]
    }
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	08005e40 	.word	0x08005e40

080006b4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	08005e50 	.word	0x08005e50

080006d0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fef8 	bl	80004d0 <_ZN3ros3MsgC1Ev>
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	809a      	strh	r2, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a06      	ldr	r2, [pc, #24]	; (8000714 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
    {
    }
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	0800605c 	.word	0x0800605c
 8000714:	08005e74 	.word	0x08005e74

08000718 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	8899      	ldrh	r1, [r3, #4]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4413      	add	r3, r2
 8000730:	b2ca      	uxtb	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b299      	uxth	r1, r3
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	3301      	adds	r3, #1
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	4413      	add	r3, r2
 8000744:	b2ca      	uxtb	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3302      	adds	r3, #2
 800074c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd42 	bl	80001dc <strlen>
 8000758:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	4413      	add	r3, r2
 8000760:	69b9      	ldr	r1, [r7, #24]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 ffd8 	bl	8001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3304      	adds	r3, #4
 800076c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	18d0      	adds	r0, r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	4619      	mov	r1, r3
 800077c:	f005 fa0c 	bl	8005b98 <memcpy>
      offset += length_topic_name;
 8000780:	69fa      	ldr	r2, [r7, #28]
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	4413      	add	r3, r2
 8000786:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd25 	bl	80001dc <strlen>
 8000792:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	6979      	ldr	r1, [r7, #20]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 ffbb 	bl	8001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	18d0      	adds	r0, r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f005 f9ef 	bl	8005b98 <memcpy>
      offset += length_message_type;
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	4413      	add	r3, r2
 80007c0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd08 	bl	80001dc <strlen>
 80007cc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	6939      	ldr	r1, [r7, #16]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ff9e 	bl	8001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	3304      	adds	r3, #4
 80007e0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	18d0      	adds	r0, r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4619      	mov	r1, r3
 80007f0:	f005 f9d2 	bl	8005b98 <memcpy>
      offset += length_md5sum;
 80007f4:	69fa      	ldr	r2, [r7, #28]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4413      	add	r3, r2
 80007fa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	0a19      	lsrs	r1, r3, #8
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3301      	adds	r3, #1
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	0c19      	lsrs	r1, r3, #16
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3302      	adds	r3, #2
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	0e19      	lsrs	r1, r3, #24
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3303      	adds	r3, #3
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	61fb      	str	r3, [r7, #28]
      return offset;
 8000844:	69fb      	ldr	r3, [r7, #28]
    }
 8000846:	4618      	mov	r0, r3
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800084e:	b580      	push	{r7, lr}
 8000850:	b08a      	sub	sp, #40	; 0x28
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b29a      	uxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	889b      	ldrh	r3, [r3, #4]
 800086e:	b21a      	sxth	r2, r3
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	3301      	adds	r3, #1
 8000874:	6839      	ldr	r1, [r7, #0]
 8000876:	440b      	add	r3, r1
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21b      	sxth	r3, r3
 8000882:	b29a      	uxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	3302      	adds	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	441a      	add	r2, r3
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ff5a 	bl	8001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3304      	adds	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	4413      	add	r3, r2
 80008b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d20c      	bcs.n	80008d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	441a      	add	r2, r3
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	3b01      	subs	r3, #1
 80008c0:	6839      	ldr	r1, [r7, #0]
 80008c2:	440b      	add	r3, r1
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	3301      	adds	r3, #1
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
 80008ce:	e7ec      	b.n	80008aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	4413      	add	r3, r2
 80008d6:	3b01      	subs	r3, #1
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	441a      	add	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	4413      	add	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	441a      	add	r2, r3
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 ff27 	bl	8001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	3304      	adds	r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	623b      	str	r3, [r7, #32]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4413      	add	r3, r2
 8000916:	6a3a      	ldr	r2, [r7, #32]
 8000918:	429a      	cmp	r2, r3
 800091a:	d20c      	bcs.n	8000936 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	441a      	add	r2, r3
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	3b01      	subs	r3, #1
 8000926:	6839      	ldr	r1, [r7, #0]
 8000928:	440b      	add	r3, r1
 800092a:	7812      	ldrb	r2, [r2, #0]
 800092c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	3301      	adds	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	e7ec      	b.n	8000910 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4413      	add	r3, r2
 800093c:	3b01      	subs	r3, #1
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	4413      	add	r3, r2
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3b01      	subs	r3, #1
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	441a      	add	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4413      	add	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	441a      	add	r2, r3
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fef4 	bl	8001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	3304      	adds	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	429a      	cmp	r2, r3
 8000980:	d20c      	bcs.n	800099c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	441a      	add	r2, r3
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	3b01      	subs	r3, #1
 800098c:	6839      	ldr	r1, [r7, #0]
 800098e:	440b      	add	r3, r1
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	3301      	adds	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
 800099a:	e7ec      	b.n	8000976 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4413      	add	r3, r2
 80009a2:	3b01      	subs	r3, #1
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	441a      	add	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	6839      	ldr	r1, [r7, #0]
 80009ca:	440a      	add	r2, r1
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	3301      	adds	r3, #1
 80009d8:	6839      	ldr	r1, [r7, #0]
 80009da:	440b      	add	r3, r1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	3302      	adds	r3, #2
 80009ea:	6839      	ldr	r1, [r7, #0]
 80009ec:	440b      	add	r3, r1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	041b      	lsls	r3, r3, #16
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	3303      	adds	r3, #3
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	440b      	add	r3, r1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	061b      	lsls	r3, r3, #24
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	3304      	adds	r3, #4
 8000a12:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a14:	69bb      	ldr	r3, [r7, #24]
    }
 8000a16:	4618      	mov	r0, r3
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	08005e78 	.word	0x08005e78

08000a3c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	08005e94 	.word	0x08005e94

08000a58 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fd34 	bl	80004d0 <_ZN3ros3MsgC1Ev>
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	711a      	strb	r2, [r3, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000a78:	609a      	str	r2, [r3, #8]
    {
    }
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08006044 	.word	0x08006044
 8000a88:	08005e74 	.word	0x08005e74

08000a8c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	7912      	ldrb	r2, [r2, #4]
 8000aa4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb93 	bl	80001dc <strlen>
 8000ab6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fe29 	bl	8001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	18d0      	adds	r0, r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f005 f85d 	bl	8005b98 <memcpy>
      offset += length_msg;
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	441a      	add	r2, r3
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fe19 	bl	8001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	3304      	adds	r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d20c      	bcs.n	8000b52 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	6839      	ldr	r1, [r7, #0]
 8000b44:	440b      	add	r3, r1
 8000b46:	7812      	ldrb	r2, [r2, #0]
 8000b48:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e7ec      	b.n	8000b2c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	441a      	add	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
     return offset;
 8000b76:	693b      	ldr	r3, [r7, #16]
    }
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	08005eb8 	.word	0x08005eb8

08000b9c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	08005ecc 	.word	0x08005ecc

08000bb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc84 	bl	80004d0 <_ZN3ros3MsgC1Ev>
 8000bc8:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	0800602c 	.word	0x0800602c

08000c14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6859      	ldr	r1, [r3, #4]
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	0a19      	lsrs	r1, r3, #8
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	3301      	adds	r3, #1
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	0c19      	lsrs	r1, r3, #16
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	0e19      	lsrs	r1, r3, #24
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	3304      	adds	r3, #4
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	6a3a      	ldr	r2, [r7, #32]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d22b      	bcs.n	8000cd2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000c88:	6939      	ldr	r1, [r7, #16]
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2ca      	uxtb	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	0a19      	lsrs	r1, r3, #8
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2ca      	uxtb	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	0c19      	lsrs	r1, r3, #16
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	3302      	adds	r3, #2
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2ca      	uxtb	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	0e19      	lsrs	r1, r3, #24
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3303      	adds	r3, #3
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
 8000cd0:	e7ce      	b.n	8000c70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6919      	ldr	r1, [r3, #16]
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	0a19      	lsrs	r1, r3, #8
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3301      	adds	r3, #1
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	0c19      	lsrs	r1, r3, #16
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	b2ca      	uxtb	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	0e19      	lsrs	r1, r3, #24
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	3304      	adds	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d22b      	bcs.n	8000d82 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d38:	68f9      	ldr	r1, [r7, #12]
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2ca      	uxtb	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	0a19      	lsrs	r1, r3, #8
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2ca      	uxtb	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	0c19      	lsrs	r1, r3, #16
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2ca      	uxtb	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	0e19      	lsrs	r1, r3, #24
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2ca      	uxtb	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	3304      	adds	r3, #4
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	e7ce      	b.n	8000d20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69d9      	ldr	r1, [r3, #28]
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	0a19      	lsrs	r1, r3, #8
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3301      	adds	r3, #1
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	0c19      	lsrs	r1, r3, #16
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	3302      	adds	r3, #2
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	b2ca      	uxtb	r2, r1
 8000db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	0e19      	lsrs	r1, r3, #24
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	3303      	adds	r3, #3
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	3304      	adds	r3, #4
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d228      	bcs.n	8000e2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9f8 	bl	80001dc <strlen>
 8000dec:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	6979      	ldr	r1, [r7, #20]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fc8e 	bl	8001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	3304      	adds	r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	18d0      	adds	r0, r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	4619      	mov	r1, r3
 8000e18:	f004 febe 	bl	8005b98 <memcpy>
      offset += length_stringsi;
 8000e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	3301      	adds	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	e7d1      	b.n	8000dd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b08e      	sub	sp, #56	; 0x38
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	3301      	adds	r3, #1
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	6a3a      	ldr	r2, [r7, #32]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e62:	3302      	adds	r3, #2
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	6a3a      	ldr	r2, [r7, #32]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	3303      	adds	r3, #3
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	061b      	lsls	r3, r3, #24
 8000e7e:	6a3a      	ldr	r2, [r7, #32]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e86:	3304      	adds	r3, #4
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	6a3a      	ldr	r2, [r7, #32]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d90a      	bls.n	8000eaa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	f004 fe8e 	bl	8005bc0 <realloc>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a3a      	ldr	r2, [r7, #32]
 8000eae:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d236      	bcs.n	8000f2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	440a      	add	r2, r1
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	440b      	add	r3, r1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	6839      	ldr	r1, [r7, #0]
 8000eea:	440b      	add	r3, r1
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	041b      	lsls	r3, r3, #16
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef8:	3303      	adds	r3, #3
 8000efa:	6839      	ldr	r1, [r7, #0]
 8000efc:	440b      	add	r3, r1
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	4313      	orrs	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0e:	3304      	adds	r3, #4
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f26:	3301      	adds	r3, #1
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
 8000f2a:	e7c3      	b.n	8000eb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f38:	3301      	adds	r3, #1
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	3304      	adds	r3, #4
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d90a      	bls.n	8000f92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699a      	ldr	r2, [r3, #24]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4619      	mov	r1, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f004 fe1a 	bl	8005bc0 <realloc>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d236      	bcs.n	8001014 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	440a      	add	r2, r1
 8000fb2:	7812      	ldrb	r2, [r2, #0]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fce:	3302      	adds	r3, #2
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	061b      	lsls	r3, r3, #24
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699a      	ldr	r2, [r3, #24]
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	3214      	adds	r2, #20
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	3301      	adds	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001012:	e7c3      	b.n	8000f9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001020:	3301      	adds	r3, #1
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	3302      	adds	r3, #2
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	041b      	lsls	r3, r3, #16
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001044:	3303      	adds	r3, #3
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001056:	3304      	adds	r3, #4
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	429a      	cmp	r2, r3
 8001062:	d90a      	bls.n	800107a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4619      	mov	r1, r3
 800106e:	4610      	mov	r0, r2
 8001070:	f004 fda6 	bl	8005bc0 <realloc>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800108a:	429a      	cmp	r2, r3
 800108c:	d23f      	bcs.n	800110e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	441a      	add	r2, r3
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fb5a 	bl	8001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a2:	3304      	adds	r3, #4
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
 80010aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d20c      	bcs.n	80010d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	441a      	add	r2, r3
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3b01      	subs	r3, #1
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	440b      	add	r3, r1
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	3301      	adds	r3, #1
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	e7ec      	b.n	80010aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	3b01      	subs	r3, #1
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	3b01      	subs	r3, #1
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	441a      	add	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80010ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	3220      	adds	r2, #32
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	3301      	adds	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	e7ba      	b.n	8001084 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800110e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001110:	4618      	mov	r0, r3
 8001112:	3738      	adds	r7, #56	; 0x38
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	08005f98 	.word	0x08005f98

08001134 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	08005ef0 	.word	0x08005ef0

08001150 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
  }
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	425b      	negs	r3, r3
 800117c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000acc 	.word	0x20000acc

080011c4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f804 	bl	80011da <_ZN13STM32Hardware10reset_rbufEv>
    }
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3304      	adds	r3, #4
 80011ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ee:	4619      	mov	r1, r3
 80011f0:	f003 fb96 	bl	8004920 <HAL_UART_Receive_DMA>
    }
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN13STM32Hardware4readEv>:

    int read(){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001208:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffa9 	bl	8001168 <_ZN13STM32Hardware10getRdmaIndEv>
 8001216:	4603      	mov	r3, r0
 8001218:	429c      	cmp	r4, r3
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d012      	beq.n	800124c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	791b      	ldrb	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800124c:	68fb      	ldr	r3, [r7, #12]
    }
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
	...

08001258 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001266:	2b20      	cmp	r3, #32
 8001268:	d108      	bne.n	800127c <_ZN13STM32Hardware5flushEv+0x24>
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <_ZN13STM32Hardware5flushEv+0xe0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_ZN13STM32Hardware5flushEv+0x24>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <_ZN13STM32Hardware5flushEv+0x26>
 800127c:	2300      	movs	r3, #0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d055      	beq.n	800132e <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001294:	429a      	cmp	r2, r3
 8001296:	d047      	beq.n	8001328 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d217      	bcs.n	80012dc <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	89fa      	ldrh	r2, [r7, #14]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f003 fa93 	bl	8004800 <HAL_UART_Transmit_DMA>
 80012da:	e01f      	b.n	800131c <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012e8:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	89fa      	ldrh	r2, [r7, #14]
 80012fe:	4619      	mov	r1, r3
 8001300:	f003 fa7e 	bl	8004800 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f503 7102 	add.w	r1, r3, #520	; 0x208
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001314:	b29b      	uxth	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	f003 fa72 	bl	8004800 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <_ZN13STM32Hardware5flushEv+0xe0>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
      }
    }
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000090 	.word	0x20000090

0800133c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
      int n = length;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001352:	bfa8      	it	ge
 8001354:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001358:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001360:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	4293      	cmp	r3, r2
 8001368:	bf28      	it	cs
 800136a:	4613      	movcs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fc09 	bl	8005b98 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4413      	add	r3, r2
 8001390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d00b      	beq.n	80013ba <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	18d1      	adds	r1, r2, r3
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	f004 fbef 	bl	8005b98 <memcpy>
      }

      flush();
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff ff4c 	bl	8001258 <_ZN13STM32Hardware5flushEv>
    }
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	f001 f91c 	bl	800260c <HAL_GetTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
      data("")
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f870 	bl	80004d0 <_ZN3ros3MsgC1Ev>
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_ZN8std_msgs6StringC1Ev+0x28>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <_ZN8std_msgs6StringC1Ev+0x2c>)
 80013fa:	605a      	str	r2, [r3, #4]
    {
    }
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	08005fe8 	.word	0x08005fe8
 800140c:	08005e74 	.word	0x08005e74

08001410 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe feda 	bl	80001dc <strlen>
 8001428:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f970 	bl	8001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3304      	adds	r3, #4
 800143c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	18d0      	adds	r0, r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4619      	mov	r1, r3
 800144c:	f004 fba4 	bl	8005b98 <memcpy>
      offset += length_data;
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
      return offset;
 8001458:	68fb      	ldr	r3, [r7, #12]
    }
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	441a      	add	r2, r3
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f969 	bl	8001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3304      	adds	r3, #4
 8001486:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d20c      	bcs.n	80014b2 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	441a      	add	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	440b      	add	r3, r1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e7ec      	b.n	800148c <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	3b01      	subs	r3, #1
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	441a      	add	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
     return offset;
 80014d6:	693b      	ldr	r3, [r7, #16]
    }
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	08005f14 	.word	0x08005f14

080014fc <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	08005f24 	.word	0x08005f24

08001518 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	08006018 	.word	0x08006018

08001538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ffe8 	bl	8001518 <_ZN3ros15NodeHandleBase_C1Ev>
 8001548:	4a36      	ldr	r2, [pc, #216]	; (8001624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3304      	adds	r3, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe1a 	bl	800118c <_ZN13STM32HardwareC1Ev>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fb12 	bl	8005bae <memset>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fb09 	bl	8005bae <memset>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80015a2:	2264      	movs	r2, #100	; 0x64
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fb01 	bl	8005bae <memset>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80015b2:	2264      	movs	r2, #100	; 0x64
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 faf9 	bl	8005bae <memset>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fad0 	bl	8000bb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	08005fd4 	.word	0x08005fd4

08001628 <_Z9messageCbRKN8std_msgs6StringE>:
#include <ros.h>
#include <std_msgs/String.h>

ros::NodeHandle nh;

void messageCb(const std_msgs::String& msg){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    if (strcmp(msg.data, "ON") == 0) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4916      	ldr	r1, [pc, #88]	; (8001690 <_Z9messageCbRKN8std_msgs6StringE+0x68>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdc6 	bl	80001c8 <strcmp>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <_Z9messageCbRKN8std_msgs6StringE+0x34>
        // LEDを点灯
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2101      	movs	r1, #1
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f001 fc9f 	bl	8002f8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2102      	movs	r1, #2
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f001 fc99 	bl	8002f8c <HAL_GPIO_WritePin>
    } else if (strcmp(msg.data, "OFF") == 0) {
        // LEDを消灯
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    }
}
 800165a:	e014      	b.n	8001686 <_Z9messageCbRKN8std_msgs6StringE+0x5e>
    } else if (strcmp(msg.data, "OFF") == 0) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <_Z9messageCbRKN8std_msgs6StringE+0x6c>)
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fdb0 	bl	80001c8 <strcmp>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10b      	bne.n	8001686 <_Z9messageCbRKN8std_msgs6StringE+0x5e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2102      	movs	r1, #2
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f001 fc89 	bl	8002f8c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2101      	movs	r1, #1
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f001 fc83 	bl	8002f8c <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	08005f48 	.word	0x08005f48
 8001694:	08005f4c 	.word	0x08005f4c

08001698 <HAL_UART_TxCpltCallback>:
//ros::Publisher chatter("/chatter", &str_msg);
//char hello[] = "Hello world!";
ros::Subscriber<std_msgs::String> sub("led_control", &messageCb);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_UART_TxCpltCallback+0x20>)
 80016a2:	f000 f8b1 	bl	8001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fdd5 	bl	8001258 <_ZN13STM32Hardware5flushEv>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000094 	.word	0x20000094

080016bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_UART_RxCpltCallback+0x20>)
 80016c6:	f000 f89f 	bl	8001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fd84 	bl	80011da <_ZN13STM32Hardware10reset_rbufEv>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000094 	.word	0x20000094

080016e0 <setup>:

void setup(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  nh.initNode();
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <setup+0x18>)
 80016e6:	f000 f89b 	bl	8001820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub); //サブスクライバを登録
 80016ea:	4904      	ldr	r1, [pc, #16]	; (80016fc <setup+0x1c>)
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <setup+0x18>)
 80016ee:	f000 f8b4 	bl	800185a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//  nh.advertise(chatter);
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000094 	.word	0x20000094
 80016fc:	200009d0 	.word	0x200009d0

08001700 <loop>:

void loop(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//#endif

//  str_msg.data = hello;
//  chatter.publish(&str_msg);
  nh.spinOnce();
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <loop+0x14>)
 8001706:	f000 f8d3 	bl	80018b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(10);
 800170a:	200a      	movs	r0, #10
 800170c:	f000 ff8a 	bl	8002624 <HAL_Delay>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000094 	.word	0x20000094

08001718 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d80d      	bhi.n	8001748 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	fa22 f103 	lsr.w	r1, r2, r3
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e7ee      	b.n	8001726 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d811      	bhi.n	8001792 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	440a      	add	r2, r1
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	00d2      	lsls	r2, r2, #3
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e7ea      	b.n	8001768 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	08006000 	.word	0x08006000

080017c0 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ffe5 	bl	80017a0 <_ZN3ros11Subscriber_C1Ev>
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	330c      	adds	r3, #12
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fdfd 	bl	80013e0 <_ZN8std_msgs6StringC1Ev>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	609a      	str	r2, [r3, #8]
  };
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08005fbc 	.word	0x08005fbc

08001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3304      	adds	r3, #4
  }
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fcc9 	bl	80011c4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b18      	cmp	r3, #24
 800186c:	dc19      	bgt.n	80018a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	605a      	str	r2, [r3, #4]
        return true;
 8001896:	2301      	movs	r3, #1
 8001898:	e004      	b.n	80018a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3301      	adds	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e7e2      	b.n	8001868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80018a2:	2300      	movs	r3, #0
  }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fd83 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 80018c2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d903      	bls.n	80018de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d903      	bls.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001902:	2b00      	cmp	r3, #0
 8001904:	d014      	beq.n	8001930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fd5c 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad2      	subs	r2, r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800191c:	429a      	cmp	r2, r3
 800191e:	bf8c      	ite	hi
 8001920:	2301      	movhi	r3, #1
 8001922:	2300      	movls	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800192a:	f06f 0301 	mvn.w	r3, #1
 800192e:	e197      	b.n	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc61 	bl	80011fc <_ZN13STM32Hardware4readEv>
 800193a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f2c0 8177 	blt.w	8001c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	441a      	add	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800195a:	2b07      	cmp	r3, #7
 800195c:	d11e      	bne.n	800199c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	b2d1      	uxtb	r1, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	460a      	mov	r2, r1
 8001976:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1b4      	bne.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2208      	movs	r2, #8
 8001996:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800199a:	e7af      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d128      	bne.n	80019f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2bff      	cmp	r3, #255	; 0xff
 80019aa:	d10d      	bne.n	80019c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f103 0214 	add.w	r2, r3, #20
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80019c6:	e799      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fcfb 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	bf8c      	ite	hi
 80019e0:	2301      	movhi	r3, #1
 80019e2:	2300      	movls	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d088      	beq.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80019f2:	f06f 0301 	mvn.w	r3, #1
 80019f6:	e133      	b.n	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d11b      	bne.n	8001a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2bfe      	cmp	r3, #254	; 0xfe
 8001a06:	d107      	bne.n	8001a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a16:	e771      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f43f af65 	beq.w	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f918 	bl	8001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001a38:	e760      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d113      	bne.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001a6a:	e747      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d110      	bne.n	8001a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	441a      	add	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a96:	e731      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d116      	bne.n	8001ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001aa8:	425a      	negs	r2, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	bf58      	it	pl
 8001ab0:	4253      	negpl	r3, r2
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d107      	bne.n	8001ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ac4:	e71a      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ace:	e715      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10f      	bne.n	8001afa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001af8:	e700      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d117      	bne.n	8001b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2207      	movs	r2, #7
 8001b1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f aee9 	bne.w	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b32:	e6e3      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	f47f aede 	bne.w	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001b4e:	425a      	negs	r2, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	bf58      	it	pl
 8001b56:	4253      	negpl	r3, r2
 8001b58:	2bff      	cmp	r3, #255	; 0xff
 8001b5a:	f47f aecf 	bne.w	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d110      	bne.n	8001b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f87d 	bl	8001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f898 	bl	8001ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b88:	e06a      	b.n	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b90:	2b0a      	cmp	r3, #10
 8001b92:	d107      	bne.n	8001ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f961 	bl	8001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001ba2:	e6ab      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d10e      	bne.n	8001bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f7ff f93a 	bl	8000e36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001bca:	e697      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bd2:	2b0b      	cmp	r3, #11
 8001bd4:	d104      	bne.n	8001be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001bde:	e68d      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001be6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f43f ae81 	beq.w	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c00:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c14:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4798      	blx	r3
    while (true)
 8001c30:	e664      	b.n	80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001c32:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00f      	beq.n	8001c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d906      	bls.n	8001c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f809 	bl	8001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001c5e:	2300      	movs	r3, #0
  }
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc3b 	bl	80004f0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	210a      	movs	r1, #10
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
    rt_time = hardware_.time();
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb9a 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fd0d 	bl	80006d0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	2b18      	cmp	r3, #24
 8001cbe:	dc63      	bgt.n	8001d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d056      	beq.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4798      	blx	r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	4798      	blx	r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d58:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681c      	ldr	r4, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9ee 	bl	8001150 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001d74:	4601      	mov	r1, r0
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	3301      	adds	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	e798      	b.n	8001cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	dc5f      	bgt.n	8001e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d053      	beq.n	8001e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3308      	adds	r3, #8
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4608      	mov	r0, r1
 8001de4:	4798      	blx	r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001df2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	330c      	adds	r3, #12
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4798      	blx	r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e14:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681c      	ldr	r4, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3304      	adds	r3, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4798      	blx	r3
 8001e3e:	4601      	mov	r1, r0
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	461a      	mov	r2, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e50:	e79c      	b.n	8001d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001e5a:	bf00      	nop
 8001e5c:	372c      	adds	r7, #44	; 0x2c
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
	...

08001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb3c 	bl	80004f0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff faa3 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 8001e82:	4602      	mov	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb9b 	bl	80005d0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	4915      	ldr	r1, [pc, #84]	; (8001ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001ea0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eba:	fb00 f303 	mul.w	r3, r0, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	3304      	adds	r3, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8a4 	bl	8002020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fa73 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	10624dd3 	.word	0x10624dd3
 8001ef8:	000f4240 	.word	0x000f4240

08001efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b63      	cmp	r3, #99	; 0x63
 8001f0c:	dd09      	ble.n	8001f22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e077      	b.n	8002012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001f2e:	3207      	adds	r2, #7
 8001f30:	4611      	mov	r1, r2
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
 8001f36:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	22fe      	movs	r2, #254	; 0xfe
 8001f44:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	121b      	asrs	r3, r3, #8
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	121b      	asrs	r3, r3, #8
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f96:	2305      	movs	r3, #5
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	da0d      	bge.n	8001fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e7ec      	b.n	8001f9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3307      	adds	r3, #7
 8001fc4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	425a      	negs	r2, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	bf58      	it	pl
 8001fd0:	4253      	negpl	r3, r2
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	6179      	str	r1, [r7, #20]
 8001fda:	43d2      	mvns	r2, r2
 8001fdc:	b2d1      	uxtb	r1, r2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fee:	dc0a      	bgt.n	8002006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1d18      	adds	r0, r3, #4
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7ff f99d 	bl	800133c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	e005      	b.n	8002012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002006:	4905      	ldr	r1, [pc, #20]	; (800201c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f849 	bl	80020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002012:	4618      	mov	r0, r3
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08005f50 	.word	0x08005f50

08002020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f9ca 	bl	80013c8 <_ZN13STM32Hardware4timeEv>
 8002034:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4915      	ldr	r1, [pc, #84]	; (8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800203e:	fba1 1303 	umull	r1, r3, r1, r3
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002056:	fba3 0302 	umull	r0, r3, r3, r2
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002060:	fb00 f303 	mul.w	r3, r0, r3
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	1aca      	subs	r2, r1, r3
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002070:	4413      	add	r3, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7fe f8b0 	bl	80001ec <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	10624dd3 	.word	0x10624dd3
 8002098:	000f4240 	.word	0x000f4240
 800209c:	3b9aca00 	.word	0x3b9aca00

080020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	2103      	movs	r1, #3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f804 	bl	80020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	460b      	mov	r3, r1
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fcc2 	bl	8000a58 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f107 0214 	add.w	r2, r7, #20
 80020e6:	2107      	movs	r1, #7
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	4798      	blx	r3
  }
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_Z41__static_initialization_and_destruction_0ii>:
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d10d      	bne.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 800210e:	4806      	ldr	r0, [pc, #24]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002110:	f7ff fa12 	bl	8001538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::String> sub("led_control", &messageCb);
 8002114:	2301      	movs	r3, #1
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002118:	4905      	ldr	r1, [pc, #20]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800211c:	f7ff fb50 	bl	80017c0 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000094 	.word	0x20000094
 800212c:	08001629 	.word	0x08001629
 8002130:	08005f8c 	.word	0x08005f8c
 8002134:	200009d0 	.word	0x200009d0

08002138 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	330c      	adds	r3, #12
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f98a 	bl	8001462 <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	320c      	adds	r2, #12
 8002156:	4610      	mov	r0, r2
 8002158:	4798      	blx	r3
  }
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
  }
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	330c      	adds	r3, #12
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f9aa 	bl	80014e0 <_ZN8std_msgs6String7getTypeEv>
 800218c:	4603      	mov	r3, r0
  }
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	330c      	adds	r3, #12
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f9aa 	bl	80014fc <_ZN8std_msgs6String6getMD5Ev>
 80021a8:	4603      	mov	r3, r0
  }
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
    return configured_;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_GLOBAL__sub_I_nh>:
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff ff8d 	bl	80020f4 <_Z41__static_initialization_and_destruction_0ii>
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_MspInit+0x44>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_MspInit+0x44>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_MspInit+0x44>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_MspInit+0x44>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_MspInit+0x44>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_MspInit+0x44>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d10b      	bne.n	800224e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_TIM_Base_MspInit+0x38>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_TIM_Base_MspInit+0x38>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_TIM_Base_MspInit+0x38>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a42      	ldr	r2, [pc, #264]	; (8002388 <HAL_UART_MspInit+0x128>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d17d      	bne.n	800237e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002282:	4b42      	ldr	r3, [pc, #264]	; (800238c <HAL_UART_MspInit+0x12c>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_UART_MspInit+0x12c>)
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	61d3      	str	r3, [r2, #28]
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_UART_MspInit+0x12c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_UART_MspInit+0x12c>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_UART_MspInit+0x12c>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	6153      	str	r3, [r2, #20]
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_UART_MspInit+0x12c>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80022b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c4:	2307      	movs	r3, #7
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f000 fce9 	bl	8002ca8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022d8:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <HAL_UART_MspInit+0x134>)
 80022da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e2:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_UART_MspInit+0x130>)
 80022fc:	2220      	movs	r2, #32
 80022fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_UART_MspInit+0x130>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002306:	4822      	ldr	r0, [pc, #136]	; (8002390 <HAL_UART_MspInit+0x130>)
 8002308:	f000 fabf 	bl	800288a <HAL_DMA_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002312:	f7fe f8c7 	bl	80004a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_UART_MspInit+0x130>)
 800231a:	671a      	str	r2, [r3, #112]	; 0x70
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_UART_MspInit+0x130>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_UART_MspInit+0x13c>)
 8002326:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_UART_MspInit+0x138>)
 800232a:	2210      	movs	r2, #16
 800232c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_UART_MspInit+0x138>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_UART_MspInit+0x138>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002352:	4811      	ldr	r0, [pc, #68]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002354:	f000 fa99 	bl	800288a <HAL_DMA_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800235e:	f7fe f8a1 	bl	80004a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_UART_MspInit+0x138>)
 8002366:	66da      	str	r2, [r3, #108]	; 0x6c
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_UART_MspInit+0x138>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2026      	movs	r0, #38	; 0x26
 8002374:	f000 fa53 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002378:	2026      	movs	r0, #38	; 0x26
 800237a:	f000 fa6c 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40004400 	.word	0x40004400
 800238c:	40021000 	.word	0x40021000
 8002390:	200009f8 	.word	0x200009f8
 8002394:	4002006c 	.word	0x4002006c
 8002398:	20000a3c 	.word	0x20000a3c
 800239c:	40020080 	.word	0x40020080

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <NMI_Handler+0x4>

080023a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <MemManage_Handler+0x4>

080023b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <UsageFault_Handler+0x4>

080023be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ec:	f000 f8fa 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <DMA1_Channel6_IRQHandler+0x10>)
 80023fa:	f000 fb63 	bl	8002ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200009f8 	.word	0x200009f8

08002408 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA1_Channel7_IRQHandler+0x10>)
 800240e:	f000 fb59 	bl	8002ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000a3c 	.word	0x20000a3c

0800241c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <USART2_IRQHandler+0x10>)
 8002422:	f002 facb 	bl	80049bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000acc 	.word	0x20000acc

08002430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244a:	f003 fb7b 	bl	8005b44 <__errno>
 800244e:	4602      	mov	r2, r0
 8002450:	2316      	movs	r3, #22
 8002452:	6013      	str	r3, [r2, #0]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002472:	e7fe      	b.n	8002472 <_exit+0x12>

08002474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <_sbrk+0x5c>)
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <_sbrk+0x60>)
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <_sbrk+0x64>)
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <_sbrk+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a4:	f003 fb4e 	bl	8005b44 <__errno>
 80024a8:	4602      	mov	r2, r0
 80024aa:	230c      	movs	r3, #12
 80024ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b2:	e009      	b.n	80024c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <_sbrk+0x64>)
 80024c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20003000 	.word	0x20003000
 80024d4:	00000400 	.word	0x00000400
 80024d8:	200009ec 	.word	0x200009ec
 80024dc:	20000b58 	.word	0x20000b58

080024e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <SystemInit+0x20>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <SystemInit+0x20>)
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800253c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002508:	480d      	ldr	r0, [pc, #52]	; (8002540 <LoopForever+0x6>)
  ldr r1, =_edata
 800250a:	490e      	ldr	r1, [pc, #56]	; (8002544 <LoopForever+0xa>)
  ldr r2, =_sidata
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <LoopForever+0xe>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002520:	4c0b      	ldr	r4, [pc, #44]	; (8002550 <LoopForever+0x16>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800252e:	f7ff ffd7 	bl	80024e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002532:	f003 fb0d 	bl	8005b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002536:	f7fd fe85 	bl	8000244 <main>

0800253a <LoopForever>:

LoopForever:
    b LoopForever
 800253a:	e7fe      	b.n	800253a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800253c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002544:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002548:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 800254c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002550:	20000b58 	.word	0x20000b58

08002554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC1_2_IRQHandler>
	...

08002558 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_Init+0x28>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_Init+0x28>)
 8002562:	f043 0310 	orr.w	r3, r3, #16
 8002566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 f94d 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	2000      	movs	r0, #0
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fe32 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000

08002584 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f965 	bl	8002872 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c0:	f000 f92d 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000008 	.word	0x20000008
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	20000b50 	.word	0x20000b50

0800260c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000b50 	.word	0x20000b50

08002624 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_Delay+0x40>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffde 	bl	800260c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000008 	.word	0x20000008

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff3e 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff8e 	bl	800275c <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5d 	bl	8002708 <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff31 	bl	80026cc <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e037      	b.n	8002910 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f9b8 	bl	8002c68 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}  
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_DMA_Start_IT+0x20>
 8002934:	2302      	movs	r3, #2
 8002936:	e04a      	b.n	80029ce <HAL_DMA_Start_IT+0xb6>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002946:	2b01      	cmp	r3, #1
 8002948:	d13a      	bne.n	80029c0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f94b 	bl	8002c0a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 020e 	orr.w	r2, r2, #14
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e00f      	b.n	80029ae <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 020a 	orr.w	r2, r2, #10
 800299c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0204 	bic.w	r2, r2, #4
 80029ac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e005      	b.n	80029cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2204      	movs	r2, #4
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e020      	b.n	8002a3c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 020e 	bic.w	r2, r2, #14
 8002a08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d005      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e027      	b.n	8002aba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 020e 	bic.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    } 
  }
  return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d024      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x72>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01f      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0204 	bic.w	r2, r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d06a      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b34:	e065      	b.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02c      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0xdc>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d027      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 020a 	bic.w	r2, r2, #10
 8002b6c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2102      	movs	r1, #2
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d035      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b9e:	e030      	b.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d028      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d023      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020e 	bic.w	r2, r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
    }
  }
}  
 8002c00:	e7ff      	b.n	8002c02 <HAL_DMA_IRQHandler+0x13e>
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d108      	bne.n	8002c4a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c48:	e007      	b.n	8002c5a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <DMA_CalcBaseAndBitshift+0x34>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x38>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	009a      	lsls	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a06      	ldr	r2, [pc, #24]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x3c>)
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	bffdfff8 	.word	0xbffdfff8
 8002ca0:	cccccccd 	.word	0xcccccccd
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb6:	e14e      	b.n	8002f56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8140 	beq.w	8002f50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d005      	beq.n	8002ce8 <HAL_GPIO_Init+0x40>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d130      	bne.n	8002d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f003 0201 	and.w	r2, r3, #1
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d017      	beq.n	8002d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d123      	bne.n	8002dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	6939      	ldr	r1, [r7, #16]
 8002dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2203      	movs	r2, #3
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0203 	and.w	r2, r3, #3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 809a 	beq.w	8002f50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1c:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <HAL_GPIO_Init+0x2cc>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a54      	ldr	r2, [pc, #336]	; (8002f74 <HAL_GPIO_Init+0x2cc>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_GPIO_Init+0x2cc>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e34:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e5e:	d013      	beq.n	8002e88 <HAL_GPIO_Init+0x1e0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_GPIO_Init+0x2d4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_GPIO_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a45      	ldr	r2, [pc, #276]	; (8002f80 <HAL_GPIO_Init+0x2d8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0x1d8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a44      	ldr	r2, [pc, #272]	; (8002f84 <HAL_GPIO_Init+0x2dc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_GPIO_Init+0x1d4>
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e006      	b.n	8002e8a <HAL_GPIO_Init+0x1e2>
 8002e7c:	2305      	movs	r3, #5
 8002e7e:	e004      	b.n	8002e8a <HAL_GPIO_Init+0x1e2>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e002      	b.n	8002e8a <HAL_GPIO_Init+0x1e2>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_Init+0x1e2>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	f002 0203 	and.w	r2, r2, #3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4093      	lsls	r3, r2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9a:	4937      	ldr	r1, [pc, #220]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea8:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ecc:	4a2e      	ldr	r2, [pc, #184]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ef6:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_GPIO_Init+0x2e0>)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f aea9 	bne.w	8002cb8 <HAL_GPIO_Init+0x10>
  }
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	48000800 	.word	0x48000800
 8002f84:	48000c00 	.word	0x48000c00
 8002f88:	40010400 	.word	0x40010400

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f000 bef4 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 816a 	beq.w	80032ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fe6:	4bb3      	ldr	r3, [pc, #716]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff2:	4bb0      	ldr	r3, [pc, #704]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d159      	bne.n	80030b2 <HAL_RCC_OscConfig+0xf6>
 8002ffe:	4bad      	ldr	r3, [pc, #692]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300a:	d152      	bne.n	80030b2 <HAL_RCC_OscConfig+0xf6>
 800300c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003010:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003020:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <HAL_RCC_OscConfig+0x82>
 8003038:	4b9e      	ldr	r3, [pc, #632]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	e015      	b.n	800306a <HAL_RCC_OscConfig+0xae>
 800303e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003042:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003056:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800305a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003066:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800306e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003072:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800307e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003082:	fab2 f282 	clz	r2, r2
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f042 0220 	orr.w	r2, r2, #32
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f002 021f 	and.w	r2, r2, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f202 	lsl.w	r2, r1, r2
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 810c 	beq.w	80032b8 <HAL_RCC_OscConfig+0x2fc>
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 8106 	bne.w	80032b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f000 be86 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x110>
 80030be:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e030      	b.n	800312e <HAL_RCC_OscConfig+0x172>
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x134>
 80030d6:	4b77      	ldr	r3, [pc, #476]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a76      	ldr	r2, [pc, #472]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01e      	b.n	800312e <HAL_RCC_OscConfig+0x172>
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x15a>
 80030fc:	4b6d      	ldr	r3, [pc, #436]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6c      	ldr	r2, [pc, #432]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a69      	ldr	r2, [pc, #420]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e00b      	b.n	800312e <HAL_RCC_OscConfig+0x172>
 8003116:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a66      	ldr	r2, [pc, #408]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800312e:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	495d      	ldr	r1, [pc, #372]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d059      	beq.n	8003200 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff fa5e 	bl	800260c <HAL_GetTick>
 8003150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003156:	f7ff fa59 	bl	800260c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d902      	bls.n	800316c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	f000 be29 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>
 800316c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003170:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003180:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d102      	bne.n	800319e <HAL_RCC_OscConfig+0x1e2>
 8003198:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x20e>
 800319e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031e2:	fab2 f282 	clz	r2, r2
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f002 021f 	and.w	r2, r2, #31
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ab      	beq.n	8003156 <HAL_RCC_OscConfig+0x19a>
 80031fe:	e05c      	b.n	80032ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7ff fa04 	bl	800260c <HAL_GetTick>
 8003204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800320a:	f7ff f9ff 	bl	800260c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d902      	bls.n	8003220 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	f000 bdcf 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>
 8003220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003224:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003234:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d102      	bne.n	8003252 <HAL_RCC_OscConfig+0x296>
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x2c2>
 8003252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003256:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800326e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_RCC_OscConfig+0x2f8>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003282:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003286:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003292:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1ab      	bne.n	800320a <HAL_RCC_OscConfig+0x24e>
 80032b2:	e002      	b.n	80032ba <HAL_RCC_OscConfig+0x2fe>
 80032b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 816f 	beq.w	80035a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032ca:	4bd0      	ldr	r3, [pc, #832]	; (800360c <HAL_RCC_OscConfig+0x650>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032d6:	4bcd      	ldr	r3, [pc, #820]	; (800360c <HAL_RCC_OscConfig+0x650>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d16c      	bne.n	80033bc <HAL_RCC_OscConfig+0x400>
 80032e2:	4bca      	ldr	r3, [pc, #808]	; (800360c <HAL_RCC_OscConfig+0x650>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d166      	bne.n	80033bc <HAL_RCC_OscConfig+0x400>
 80032ee:	2302      	movs	r3, #2
 80032f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003300:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x362>
 8003318:	4bbc      	ldr	r3, [pc, #752]	; (800360c <HAL_RCC_OscConfig+0x650>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e013      	b.n	8003346 <HAL_RCC_OscConfig+0x38a>
 800331e:	2302      	movs	r3, #2
 8003320:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003330:	2302      	movs	r3, #2
 8003332:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003336:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003342:	4bb2      	ldr	r3, [pc, #712]	; (800360c <HAL_RCC_OscConfig+0x650>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2202      	movs	r2, #2
 8003348:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800334c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003358:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_RCC_OscConfig+0x3cc>
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d002      	beq.n	8003388 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f000 bd1b 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4ba0      	ldr	r3, [pc, #640]	; (800360c <HAL_RCC_OscConfig+0x650>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	21f8      	movs	r1, #248	; 0xf8
 8003398:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033a0:	fa91 f1a1 	rbit	r1, r1
 80033a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80033a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80033ac:	fab1 f181 	clz	r1, r1
 80033b0:	b2c9      	uxtb	r1, r1
 80033b2:	408b      	lsls	r3, r1
 80033b4:	4995      	ldr	r1, [pc, #596]	; (800360c <HAL_RCC_OscConfig+0x650>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	e0f5      	b.n	80035a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8085 	beq.w	80034d2 <HAL_RCC_OscConfig+0x516>
 80033c8:	2301      	movs	r3, #1
 80033ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	461a      	mov	r2, r3
 80033f0:	2301      	movs	r3, #1
 80033f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7ff f90a 	bl	800260c <HAL_GetTick>
 80033f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fe:	f7ff f905 	bl	800260c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d902      	bls.n	8003414 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	f000 bcd5 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>
 8003414:	2302      	movs	r3, #2
 8003416:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003426:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0x488>
 800343e:	4b73      	ldr	r3, [pc, #460]	; (800360c <HAL_RCC_OscConfig+0x650>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	e013      	b.n	800346c <HAL_RCC_OscConfig+0x4b0>
 8003444:	2302      	movs	r3, #2
 8003446:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800345c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x650>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2202      	movs	r2, #2
 800346e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003472:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800347e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003482:	fab2 f282 	clz	r2, r2
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f042 0220 	orr.w	r2, r2, #32
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f002 021f 	and.w	r2, r2, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0af      	beq.n	80033fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x650>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	21f8      	movs	r1, #248	; 0xf8
 80034ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034b6:	fa91 f1a1 	rbit	r1, r1
 80034ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80034be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034c2:	fab1 f181 	clz	r1, r1
 80034c6:	b2c9      	uxtb	r1, r1
 80034c8:	408b      	lsls	r3, r1
 80034ca:	4950      	ldr	r1, [pc, #320]	; (800360c <HAL_RCC_OscConfig+0x650>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e06a      	b.n	80035a8 <HAL_RCC_OscConfig+0x5ec>
 80034d2:	2301      	movs	r3, #1
 80034d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	461a      	mov	r2, r3
 80034fa:	2300      	movs	r3, #0
 80034fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7ff f885 	bl	800260c <HAL_GetTick>
 8003502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7ff f880 	bl	800260c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d902      	bls.n	800351e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	f000 bc50 	b.w	8003dbe <HAL_RCC_OscConfig+0xe02>
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d102      	bne.n	800354e <HAL_RCC_OscConfig+0x592>
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_RCC_OscConfig+0x650>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	e013      	b.n	8003576 <HAL_RCC_OscConfig+0x5ba>
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003566:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x650>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2202      	movs	r2, #2
 8003578:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800357c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003588:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f042 0220 	orr.w	r2, r2, #32
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f002 021f 	and.w	r2, r2, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f202 	lsl.w	r2, r1, r2
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1af      	bne.n	8003508 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80da 	beq.w	800376c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d069      	beq.n	8003696 <HAL_RCC_OscConfig+0x6da>
 80035c2:	2301      	movs	r3, #1
 80035c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x654>)
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	461a      	mov	r2, r3
 80035e8:	2301      	movs	r3, #1
 80035ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7ff f80e 	bl	800260c <HAL_GetTick>
 80035f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f4:	e00e      	b.n	8003614 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f6:	f7ff f809 	bl	800260c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d906      	bls.n	8003614 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e3d9      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	10908120 	.word	0x10908120
 8003614:	2302      	movs	r3, #2
 8003616:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003626:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800362a:	2202      	movs	r2, #2
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	fa93 f2a3 	rbit	r2, r3
 8003638:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003642:	2202      	movs	r2, #2
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003654:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	4ba5      	ldr	r3, [pc, #660]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800365a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800365e:	2102      	movs	r1, #2
 8003660:	6019      	str	r1, [r3, #0]
 8003662:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	fa93 f1a3 	rbit	r1, r3
 800366c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003670:	6019      	str	r1, [r3, #0]
  return result;
 8003672:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0b0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x63a>
 8003694:	e06a      	b.n	800376c <HAL_RCC_OscConfig+0x7b0>
 8003696:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036ac:	601a      	str	r2, [r3, #0]
  return result;
 80036ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <HAL_RCC_OscConfig+0x934>)
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fe ffa0 	bl	800260c <HAL_GetTick>
 80036cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	e009      	b.n	80036e6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe ff9b 	bl	800260c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e36b      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 80036e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036ea:	2202      	movs	r2, #2
 80036ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003702:	2202      	movs	r2, #2
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800371a:	2202      	movs	r2, #2
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	fa93 f2a3 	rbit	r2, r3
 8003728:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800372c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372e:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003732:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003736:	2102      	movs	r1, #2
 8003738:	6019      	str	r1, [r3, #0]
 800373a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f1a3 	rbit	r1, r3
 8003744:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003748:	6019      	str	r1, [r3, #0]
  return result;
 800374a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1b2      	bne.n	80036d2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8158 	beq.w	8003a2c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b5a      	ldr	r3, [pc, #360]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d112      	bne.n	80037b4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	4b57      	ldr	r3, [pc, #348]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4a56      	ldr	r2, [pc, #344]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	61d3      	str	r3, [r2, #28]
 800379a:	4b54      	ldr	r3, [pc, #336]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f107 0308 	add.w	r3, r7, #8
 80037ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCC_OscConfig+0x938>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11a      	bne.n	80037f6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_RCC_OscConfig+0x938>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_RCC_OscConfig+0x938>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037cc:	f7fe ff1e 	bl	800260c <HAL_GetTick>
 80037d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e009      	b.n	80037ea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7fe ff19 	bl	800260c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e2e9      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <HAL_RCC_OscConfig+0x938>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ef      	beq.n	80037d6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x852>
 8003800:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a39      	ldr	r2, [pc, #228]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	e02f      	b.n	800386e <HAL_RCC_OscConfig+0x8b2>
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_OscConfig+0x876>
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a33      	ldr	r2, [pc, #204]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6213      	str	r3, [r2, #32]
 8003824:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800382a:	f023 0304 	bic.w	r3, r3, #4
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	e01d      	b.n	800386e <HAL_RCC_OscConfig+0x8b2>
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x89a>
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	6213      	str	r3, [r2, #32]
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4a27      	ldr	r2, [pc, #156]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6213      	str	r3, [r2, #32]
 8003854:	e00b      	b.n	800386e <HAL_RCC_OscConfig+0x8b2>
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a24      	ldr	r2, [pc, #144]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	6213      	str	r3, [r2, #32]
 8003862:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4a21      	ldr	r2, [pc, #132]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 8003868:	f023 0304 	bic.w	r3, r3, #4
 800386c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d06b      	beq.n	8003950 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7fe fec8 	bl	800260c <HAL_GetTick>
 800387c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	e00b      	b.n	800389a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fe fec3 	bl	800260c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e291      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 800389a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800389e:	2202      	movs	r2, #2
 80038a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80038b6:	2202      	movs	r2, #2
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038c8:	601a      	str	r2, [r3, #0]
  return result;
 80038ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_OscConfig+0x93c>
 80038e4:	4b01      	ldr	r3, [pc, #4]	; (80038ec <HAL_RCC_OscConfig+0x930>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	e014      	b.n	8003914 <HAL_RCC_OscConfig+0x958>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	10908120 	.word	0x10908120
 80038f4:	40007000 	.word	0x40007000
 80038f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038fc:	2202      	movs	r2, #2
 80038fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	4bbb      	ldr	r3, [pc, #748]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003918:	2102      	movs	r1, #2
 800391a:	6011      	str	r1, [r2, #0]
 800391c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	fa92 f1a2 	rbit	r1, r2
 8003926:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800392a:	6011      	str	r1, [r2, #0]
  return result;
 800392c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	fab2 f282 	clz	r2, r2
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f002 021f 	and.w	r2, r2, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f202 	lsl.w	r2, r1, r2
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d099      	beq.n	8003882 <HAL_RCC_OscConfig+0x8c6>
 800394e:	e063      	b.n	8003a18 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fe fe5c 	bl	800260c <HAL_GetTick>
 8003954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	e00b      	b.n	8003972 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fe57 	bl	800260c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e225      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 8003972:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003976:	2202      	movs	r2, #2
 8003978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	fa93 f2a3 	rbit	r2, r3
 8003984:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800398e:	2202      	movs	r2, #2
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039a0:	601a      	str	r2, [r3, #0]
  return result;
 80039a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d102      	bne.n	80039c2 <HAL_RCC_OscConfig+0xa06>
 80039bc:	4b90      	ldr	r3, [pc, #576]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	e00d      	b.n	80039de <HAL_RCC_OscConfig+0xa22>
 80039c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039c6:	2202      	movs	r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	4b89      	ldr	r3, [pc, #548]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039e2:	2102      	movs	r1, #2
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	fa92 f1a2 	rbit	r1, r2
 80039f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039f4:	6011      	str	r1, [r2, #0]
  return result;
 80039f6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	fab2 f282 	clz	r2, r2
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f002 021f 	and.w	r2, r2, #31
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1a0      	bne.n	800395a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a20:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4a76      	ldr	r2, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 81c2 	beq.w	8003dbc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a38:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	f000 819c 	beq.w	8003d7e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	f040 8114 	bne.w	8003c7a <HAL_RCC_OscConfig+0xcbe>
 8003a52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fa93 f2a3 	rbit	r2, r3
 8003a66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a6a:	601a      	str	r2, [r3, #0]
  return result;
 8003a6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	461a      	mov	r2, r3
 8003a84:	2300      	movs	r3, #0
 8003a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe fdc0 	bl	800260c <HAL_GetTick>
 8003a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a90:	e009      	b.n	8003aa6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe fdbb 	bl	800260c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e18b      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 8003aa6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ac4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d102      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xb24>
 8003ada:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	e01b      	b.n	8003b18 <HAL_RCC_OscConfig+0xb5c>
 8003ae0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fa93 f2a3 	rbit	r2, r3
 8003af4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b20:	6011      	str	r1, [r2, #0]
 8003b22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	fa92 f1a2 	rbit	r1, r2
 8003b2c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b30:	6011      	str	r1, [r2, #0]
  return result;
 8003b32:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	fab2 f282 	clz	r2, r2
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	f042 0220 	orr.w	r2, r2, #32
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	f002 021f 	and.w	r2, r2, #31
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d19e      	bne.n	8003a92 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	4925      	ldr	r1, [pc, #148]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	fa93 f2a3 	rbit	r2, r3
 8003b84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b88:	601a      	str	r2, [r3, #0]
  return result;
 8003b8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b8e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fd31 	bl	800260c <HAL_GetTick>
 8003baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bae:	e009      	b.n	8003bc4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe fd2c 	bl	800260c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0fc      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 8003bc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f2a3 	rbit	r2, r3
 8003bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bdc:	601a      	str	r2, [r3, #0]
  return result;
 8003bde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCC_OscConfig+0xc48>
 8003bf8:	4b01      	ldr	r3, [pc, #4]	; (8003c00 <HAL_RCC_OscConfig+0xc44>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	e01e      	b.n	8003c3c <HAL_RCC_OscConfig+0xc80>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fa93 f2a3 	rbit	r2, r3
 8003c18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_OscConfig+0xe0c>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c44:	6011      	str	r1, [r2, #0]
 8003c46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	fa92 f1a2 	rbit	r1, r2
 8003c50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c54:	6011      	str	r1, [r2, #0]
  return result;
 8003c56:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	fab2 f282 	clz	r2, r2
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f042 0220 	orr.w	r2, r2, #32
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f002 021f 	and.w	r2, r2, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d09b      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xbf4>
 8003c78:	e0a0      	b.n	8003dbc <HAL_RCC_OscConfig+0xe00>
 8003c7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	fa93 f2a3 	rbit	r2, r3
 8003c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c92:	601a      	str	r2, [r3, #0]
  return result;
 8003c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	461a      	mov	r2, r3
 8003cac:	2300      	movs	r3, #0
 8003cae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fcac 	bl	800260c <HAL_GetTick>
 8003cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	e009      	b.n	8003cce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fe fca7 	bl	800260c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e077      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
 8003cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce6:	601a      	str	r2, [r3, #0]
  return result;
 8003ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_OscConfig+0xd4c>
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCC_OscConfig+0xe0c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	e01b      	b.n	8003d40 <HAL_RCC_OscConfig+0xd84>
 8003d08:	f107 0320 	add.w	r3, r7, #32
 8003d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f107 0320 	add.w	r3, r7, #32
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f107 031c 	add.w	r3, r7, #28
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f107 0318 	add.w	r3, r7, #24
 8003d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f107 0318 	add.w	r3, r7, #24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	fa93 f2a3 	rbit	r2, r3
 8003d36:	f107 0314 	add.w	r3, r7, #20
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_RCC_OscConfig+0xe0c>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f107 0210 	add.w	r2, r7, #16
 8003d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d48:	6011      	str	r1, [r2, #0]
 8003d4a:	f107 0210 	add.w	r2, r7, #16
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	fa92 f1a2 	rbit	r1, r2
 8003d54:	f107 020c 	add.w	r2, r7, #12
 8003d58:	6011      	str	r1, [r2, #0]
  return result;
 8003d5a:	f107 020c 	add.w	r2, r7, #12
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	fab2 f282 	clz	r2, r2
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	f002 021f 	and.w	r2, r2, #31
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f202 	lsl.w	r2, r1, r2
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d19e      	bne.n	8003cba <HAL_RCC_OscConfig+0xcfe>
 8003d7c:	e01e      	b.n	8003dbc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_RCC_OscConfig+0xe0c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003da6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003daa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b09e      	sub	sp, #120	; 0x78
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e162      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b90      	ldr	r3, [pc, #576]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d910      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 0207 	bic.w	r2, r3, #7
 8003dfa:	498b      	ldr	r1, [pc, #556]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b89      	ldr	r3, [pc, #548]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e14a      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b82      	ldr	r3, [pc, #520]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	497f      	ldr	r1, [pc, #508]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80dc 	beq.w	8003ff8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d13c      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xf6>
 8003e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xa6>
 8003e6c:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	e00f      	b.n	8003e92 <HAL_RCC_ClockConfig+0xc6>
 8003e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e84:	663b      	str	r3, [r7, #96]	; 0x60
 8003e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8e:	4b67      	ldr	r3, [pc, #412]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e9a:	fa92 f2a2 	rbit	r2, r2
 8003e9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ea2:	fab2 f282 	clz	r2, r2
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	f042 0220 	orr.w	r2, r2, #32
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	f002 021f 	and.w	r2, r2, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d17b      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0f3      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d13c      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x178>
 8003eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ece:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x128>
 8003eee:	4b4f      	ldr	r3, [pc, #316]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e00f      	b.n	8003f14 <HAL_RCC_ClockConfig+0x148>
 8003ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
 8003f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f06:	643b      	str	r3, [r7, #64]	; 0x40
 8003f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f18:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f1c:	fa92 f2a2 	rbit	r2, r2
 8003f20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	f042 0220 	orr.w	r2, r2, #32
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f002 021f 	and.w	r2, r2, #31
 8003f34:	2101      	movs	r1, #1
 8003f36:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d13a      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0b2      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
 8003f44:	2302      	movs	r3, #2
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x1a0>
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e00d      	b.n	8003f88 <HAL_RCC_ClockConfig+0x1bc>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	2302      	movs	r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2202      	movs	r2, #2
 8003f8a:	61ba      	str	r2, [r7, #24]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	fa92 f2a2 	rbit	r2, r2
 8003f92:	617a      	str	r2, [r7, #20]
  return result;
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	fab2 f282 	clz	r2, r2
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	f042 0220 	orr.w	r2, r2, #32
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f002 021f 	and.w	r2, r2, #31
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e079      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	491a      	ldr	r1, [pc, #104]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fe fb20 	bl	800260c <HAL_GetTick>
 8003fcc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fe fb1c 	bl	800260c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e061      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <HAL_RCC_ClockConfig+0x260>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 020c 	and.w	r2, r3, #12
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d214      	bcs.n	8004030 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 0207 	bic.w	r2, r3, #7
 800400e:	4906      	ldr	r1, [pc, #24]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e040      	b.n	80040aa <HAL_RCC_ClockConfig+0x2de>
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_RCC_ClockConfig+0x2e8>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	491a      	ldr	r1, [pc, #104]	; (80040b4 <HAL_RCC_ClockConfig+0x2e8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800405a:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_RCC_ClockConfig+0x2e8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4912      	ldr	r1, [pc, #72]	; (80040b4 <HAL_RCC_ClockConfig+0x2e8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800406e:	f000 f829 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8004072:	4601      	mov	r1, r0
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_RCC_ClockConfig+0x2e8>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407c:	22f0      	movs	r2, #240	; 0xf0
 800407e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	fa92 f2a2 	rbit	r2, r2
 8004086:	60fa      	str	r2, [r7, #12]
  return result;
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	fab2 f282 	clz	r2, r2
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	40d3      	lsrs	r3, r2
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <HAL_RCC_ClockConfig+0x2ec>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	fa21 f303 	lsr.w	r3, r1, r3
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_RCC_ClockConfig+0x2f0>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_RCC_ClockConfig+0x2f4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fa6e 	bl	8002584 <HAL_InitTick>
  
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3778      	adds	r7, #120	; 0x78
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
 80040b8:	0800609c 	.word	0x0800609c
 80040bc:	20000000 	.word	0x20000000
 80040c0:	20000004 	.word	0x20000004

080040c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b08b      	sub	sp, #44	; 0x2c
 80040c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	2300      	movs	r3, #0
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d002      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x30>
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0x36>
 80040f2:	e03c      	b.n	800416e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040f6:	623b      	str	r3, [r7, #32]
      break;
 80040f8:	e03c      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004100:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004104:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	fa92 f2a2 	rbit	r2, r2
 800410c:	607a      	str	r2, [r7, #4]
  return result;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	fab2 f282 	clz	r2, r2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	40d3      	lsrs	r3, r2
 8004118:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_RCC_GetSysClockFreq+0xc8>)
 800411a:	5cd3      	ldrb	r3, [r2, r3]
 800411c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	220f      	movs	r2, #15
 8004128:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	fa92 f2a2 	rbit	r2, r2
 8004130:	60fa      	str	r2, [r7, #12]
  return result;
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	fab2 f282 	clz	r2, r2
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	40d3      	lsrs	r3, r2
 800413c:	4a14      	ldr	r2, [pc, #80]	; (8004190 <HAL_RCC_GetSysClockFreq+0xcc>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800414c:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc4>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	fbb2 f2f3 	udiv	r2, r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	e004      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	623b      	str	r3, [r7, #32]
      break;
 800416c:	e002      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004170:	623b      	str	r3, [r7, #32]
      break;
 8004172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004174:	6a3b      	ldr	r3, [r7, #32]
}
 8004176:	4618      	mov	r0, r3
 8004178:	372c      	adds	r7, #44	; 0x2c
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	007a1200 	.word	0x007a1200
 800418c:	080060b4 	.word	0x080060b4
 8004190:	080060c4 	.word	0x080060c4
 8004194:	003d0900 	.word	0x003d0900

08004198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_GetHCLKFreq+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041b6:	f7ff ffef 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041ba:	4601      	mov	r1, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	fa92 f2a2 	rbit	r2, r2
 80041d0:	603a      	str	r2, [r7, #0]
  return result;
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	40d3      	lsrs	r3, r2
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	080060ac 	.word	0x080060ac

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80041fa:	f7ff ffcd 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041fe:	4601      	mov	r1, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004208:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800420c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	fa92 f2a2 	rbit	r2, r2
 8004214:	603a      	str	r2, [r7, #0]
  return result;
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	fab2 f282 	clz	r2, r2
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	40d3      	lsrs	r3, r2
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	080060ac 	.word	0x080060ac

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e049      	b.n	80042de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd ffe0 	bl	8002224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 f8f4 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_ConfigClockSource+0x1c>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0ab      	b.n	800445a <HAL_TIM_ConfigClockSource+0x174>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004324:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d067      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x128>
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d80b      	bhi.n	800435a <HAL_TIM_ConfigClockSource+0x74>
 8004342:	2b10      	cmp	r3, #16
 8004344:	d073      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x148>
 8004346:	2b10      	cmp	r3, #16
 8004348:	d802      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x6a>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06f      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x148>
 800434e:	e077      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d06c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x148>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d06a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x148>
 8004358:	e072      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x15a>
 800435a:	2b70      	cmp	r3, #112	; 0x70
 800435c:	d00d      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x94>
 800435e:	2b70      	cmp	r3, #112	; 0x70
 8004360:	d804      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x86>
 8004362:	2b50      	cmp	r3, #80	; 0x50
 8004364:	d033      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xe8>
 8004366:	2b60      	cmp	r3, #96	; 0x60
 8004368:	d041      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x108>
 800436a:	e069      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x15a>
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d069      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x160>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	d017      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0xc2>
 8004378:	e062      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f000 f95d 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800439c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
      break;
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f000 f946 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ca:	609a      	str	r2, [r3, #8]
      break;
 80043cc:	e03c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f8ba 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2150      	movs	r1, #80	; 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f913 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e02c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f8d9 	bl	80045b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2160      	movs	r1, #96	; 0x60
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f903 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800440c:	e01c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f89a 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f8f3 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800442c:	e00c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 f8ea 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800443e:	e003      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e000      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a32      	ldr	r2, [pc, #200]	; (8004540 <TIM_Base_SetConfig+0xdc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x28>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x28>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a2f      	ldr	r2, [pc, #188]	; (8004544 <TIM_Base_SetConfig+0xe0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <TIM_Base_SetConfig+0xdc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a24      	ldr	r2, [pc, #144]	; (8004544 <TIM_Base_SetConfig+0xe0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <TIM_Base_SetConfig+0xe4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <TIM_Base_SetConfig+0xe8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a21      	ldr	r2, [pc, #132]	; (8004550 <TIM_Base_SetConfig+0xec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <TIM_Base_SetConfig+0xdc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0xc0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <TIM_Base_SetConfig+0xe4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0xc0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <TIM_Base_SetConfig+0xe8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xc0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <TIM_Base_SetConfig+0xec>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40000400 	.word	0x40000400
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 030a 	bic.w	r3, r3, #10
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e054      	b.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a24      	ldr	r2, [pc, #144]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a17      	ldr	r2, [pc, #92]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d009      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a13      	ldr	r2, [pc, #76]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a11      	ldr	r2, [pc, #68]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10c      	bne.n	8004738 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4313      	orrs	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40014000 	.word	0x40014000

08004764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e040      	b.n	80047f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd fd6a 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fc14 	bl	8004fd0 <UART_SetConfig>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e022      	b.n	80047f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd40 	bl	8005240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fdc7 	bl	8005384 <UART_CheckIdleState>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004812:	2b20      	cmp	r3, #32
 8004814:	d178      	bne.n	8004908 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_UART_Transmit_DMA+0x22>
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e071      	b.n	800490a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_UART_Transmit_DMA+0x34>
 8004830:	2302      	movs	r3, #2
 8004832:	e06a      	b.n	800490a <HAL_UART_Transmit_DMA+0x10a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2221      	movs	r2, #33	; 0x21
 800485e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d02b      	beq.n	80048c0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486c:	4a29      	ldr	r2, [pc, #164]	; (8004914 <HAL_UART_Transmit_DMA+0x114>)
 800486e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_UART_Transmit_DMA+0x118>)
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <HAL_UART_Transmit_DMA+0x11c>)
 800487e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004884:	2200      	movs	r2, #0
 8004886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004890:	4619      	mov	r1, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3328      	adds	r3, #40	; 0x28
 8004898:	461a      	mov	r2, r3
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	f7fe f83c 	bl	8002918 <HAL_DMA_Start_IT>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2210      	movs	r2, #16
 80048aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e024      	b.n	800490a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2240      	movs	r2, #64	; 0x40
 80048c6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	613b      	str	r3, [r7, #16]
   return(result);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	623a      	str	r2, [r7, #32]
 80048f2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	080057f7 	.word	0x080057f7
 8004918:	0800588b 	.word	0x0800588b
 800491c:	080059fd 	.word	0x080059fd

08004920 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004932:	2b20      	cmp	r3, #32
 8004934:	d13d      	bne.n	80049b2 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_UART_Receive_DMA+0x22>
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e036      	b.n	80049b4 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_UART_Receive_DMA+0x34>
 8004950:	2302      	movs	r3, #2
 8004952:	e02f      	b.n	80049b4 <HAL_UART_Receive_DMA+0x94>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d018      	beq.n	80049a2 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	613b      	str	r3, [r7, #16]
   return(result);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	623b      	str	r3, [r7, #32]
 8004990:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	6a3a      	ldr	r2, [r7, #32]
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	61bb      	str	r3, [r7, #24]
   return(result);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e6      	bne.n	8004970 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fdf9 	bl	80055a0 <UART_Start_Receive_DMA>
 80049ae:	4603      	mov	r3, r0
 80049b0:	e000      	b.n	80049b4 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b0ba      	sub	sp, #232	; 0xe8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80049ea:	4013      	ands	r3, r2
 80049ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d115      	bne.n	8004a24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00f      	beq.n	8004a24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 82a4 	beq.w	8004f62 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
      }
      return;
 8004a22:	e29e      	b.n	8004f62 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8117 	beq.w	8004c5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a3e:	4b85      	ldr	r3, [pc, #532]	; (8004c54 <HAL_UART_IRQHandler+0x298>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 810a 	beq.w	8004c5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d011      	beq.n	8004a78 <HAL_UART_IRQHandler+0xbc>
 8004a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d011      	beq.n	8004aa8 <HAL_UART_IRQHandler+0xec>
 8004a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2202      	movs	r2, #2
 8004a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9e:	f043 0204 	orr.w	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d011      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x11c>
 8004ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ace:	f043 0202 	orr.w	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d017      	beq.n	8004b14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2208      	movs	r2, #8
 8004b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0a:	f043 0208 	orr.w	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <HAL_UART_IRQHandler+0x18a>
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00c      	beq.n	8004b46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 820a 	beq.w	8004f66 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d005      	beq.n	8004b9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d04f      	beq.n	8004c3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fdc6 	bl	8005730 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d141      	bne.n	8004c36 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1d9      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d013      	beq.n	8004c2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <HAL_UART_IRQHandler+0x29c>)
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd ff18 	bl	8002a48 <HAL_DMA_Abort_IT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e00f      	b.n	8004c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9b8 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e00b      	b.n	8004c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9b4 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	e007      	b.n	8004c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9b0 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c4c:	e18b      	b.n	8004f66 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4e:	bf00      	nop
    return;
 8004c50:	e189      	b.n	8004f66 <HAL_UART_IRQHandler+0x5aa>
 8004c52:	bf00      	nop
 8004c54:	04000120 	.word	0x04000120
 8004c58:	08005a79 	.word	0x08005a79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f040 8143 	bne.w	8004eec <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 813c 	beq.w	8004eec <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8135 	beq.w	8004eec <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2210      	movs	r2, #16
 8004c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	f040 80b1 	bne.w	8004dfc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 815d 	beq.w	8004f6a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	f080 8155 	bcs.w	8004f6a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	f000 8085 	beq.w	8004de0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d04:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1da      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e1      	bne.n	8004d20 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e3      	bne.n	8004d5c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e4      	bne.n	8004da0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd fdfb 	bl	80029d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8df 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dfa:	e0b6      	b.n	8004f6a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80a8 	beq.w	8004f6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80a3 	beq.w	8004f6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e4      	bne.n	8004e28 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e82:	633a      	str	r2, [r7, #48]	; 0x30
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e3      	bne.n	8004e5e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f023 0310 	bic.w	r3, r3, #16
 8004ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e4      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f867 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004eea:	e040      	b.n	8004f6e <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <HAL_UART_IRQHandler+0x55a>
 8004ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fdf2 	bl	8005af8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f14:	e02e      	b.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01d      	beq.n	8004f72 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
    }
    return;
 8004f3e:	e018      	b.n	8004f72 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d013      	beq.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fda3 	bl	8005aa4 <UART_EndTransmit_IT>
    return;
 8004f5e:	bf00      	nop
 8004f60:	e008      	b.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004f62:	bf00      	nop
 8004f64:	e006      	b.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004f66:	bf00      	nop
 8004f68:	e004      	b.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004f72:	bf00      	nop
  }

}
 8004f74:	37e8      	adds	r7, #232	; 0xe8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop

08004f7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b8b      	ldr	r3, [pc, #556]	; (8005228 <UART_SetConfig+0x258>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	430b      	orrs	r3, r1
 8005006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	430a      	orrs	r2, r1
 8005040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a79      	ldr	r2, [pc, #484]	; (800522c <UART_SetConfig+0x25c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d121      	bne.n	8005090 <UART_SetConfig+0xc0>
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <UART_SetConfig+0x260>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d817      	bhi.n	8005088 <UART_SetConfig+0xb8>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0x90>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005071 	.word	0x08005071
 8005064:	0800507d 	.word	0x0800507d
 8005068:	08005083 	.word	0x08005083
 800506c:	08005077 	.word	0x08005077
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e01e      	b.n	80050b4 <UART_SetConfig+0xe4>
 8005076:	2302      	movs	r3, #2
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e01b      	b.n	80050b4 <UART_SetConfig+0xe4>
 800507c:	2304      	movs	r3, #4
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e018      	b.n	80050b4 <UART_SetConfig+0xe4>
 8005082:	2308      	movs	r3, #8
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e015      	b.n	80050b4 <UART_SetConfig+0xe4>
 8005088:	2310      	movs	r3, #16
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	bf00      	nop
 800508e:	e011      	b.n	80050b4 <UART_SetConfig+0xe4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a67      	ldr	r2, [pc, #412]	; (8005234 <UART_SetConfig+0x264>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d102      	bne.n	80050a0 <UART_SetConfig+0xd0>
 800509a:	2300      	movs	r3, #0
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e009      	b.n	80050b4 <UART_SetConfig+0xe4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a64      	ldr	r2, [pc, #400]	; (8005238 <UART_SetConfig+0x268>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d102      	bne.n	80050b0 <UART_SetConfig+0xe0>
 80050aa:	2300      	movs	r3, #0
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e001      	b.n	80050b4 <UART_SetConfig+0xe4>
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	d15c      	bne.n	8005178 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d828      	bhi.n	8005116 <UART_SetConfig+0x146>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0xfc>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	08005117 	.word	0x08005117
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005117 	.word	0x08005117
 80050e4:	08005117 	.word	0x08005117
 80050e8:	08005117 	.word	0x08005117
 80050ec:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7ff f85e 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 80050f4:	61b8      	str	r0, [r7, #24]
        break;
 80050f6:	e013      	b.n	8005120 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7ff f87c 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 80050fc:	61b8      	str	r0, [r7, #24]
        break;
 80050fe:	e00f      	b.n	8005120 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <UART_SetConfig+0x26c>)
 8005102:	61bb      	str	r3, [r7, #24]
        break;
 8005104:	e00c      	b.n	8005120 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7fe ffdd 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 800510a:	61b8      	str	r0, [r7, #24]
        break;
 800510c:	e008      	b.n	8005120 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e004      	b.n	8005120 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	77bb      	strb	r3, [r7, #30]
        break;
 800511e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d074      	beq.n	8005210 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	005a      	lsls	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	b29b      	uxth	r3, r3
 800513c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d916      	bls.n	8005172 <UART_SetConfig+0x1a2>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d212      	bcs.n	8005172 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	b29a      	uxth	r2, r3
 8005162:	89fb      	ldrh	r3, [r7, #14]
 8005164:	4313      	orrs	r3, r2
 8005166:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	89fa      	ldrh	r2, [r7, #14]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e04e      	b.n	8005210 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	77bb      	strb	r3, [r7, #30]
 8005176:	e04b      	b.n	8005210 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005178:	7ffb      	ldrb	r3, [r7, #31]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d827      	bhi.n	80051ce <UART_SetConfig+0x1fe>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x1b4>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7ff f802 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 80051ac:	61b8      	str	r0, [r7, #24]
        break;
 80051ae:	e013      	b.n	80051d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7ff f820 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 80051b4:	61b8      	str	r0, [r7, #24]
        break;
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b20      	ldr	r3, [pc, #128]	; (800523c <UART_SetConfig+0x26c>)
 80051ba:	61bb      	str	r3, [r7, #24]
        break;
 80051bc:	e00c      	b.n	80051d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7fe ff81 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 80051c2:	61b8      	str	r0, [r7, #24]
        break;
 80051c4:	e008      	b.n	80051d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e004      	b.n	80051d8 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	77bb      	strb	r3, [r7, #30]
        break;
 80051d6:	bf00      	nop
    }

    if (pclk != 0U)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	085a      	lsrs	r2, r3, #1
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	441a      	add	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d908      	bls.n	800520c <UART_SetConfig+0x23c>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d204      	bcs.n	800520c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	e001      	b.n	8005210 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800521c:	7fbb      	ldrb	r3, [r7, #30]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	efff69f3 	.word	0xefff69f3
 800522c:	40013800 	.word	0x40013800
 8005230:	40021000 	.word	0x40021000
 8005234:	40004400 	.word	0x40004400
 8005238:	40004800 	.word	0x40004800
 800523c:	007a1200 	.word	0x007a1200

08005240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01a      	beq.n	8005356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533e:	d10a      	bne.n	8005356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]
  }
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005394:	f7fd f93a 	bl	800260c <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d10e      	bne.n	80053c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f82d 	bl	8005416 <UART_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e023      	b.n	800540e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d10e      	bne.n	80053f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f817 	bl	8005416 <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e00d      	b.n	800540e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b09c      	sub	sp, #112	; 0x70
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005426:	e0a5      	b.n	8005574 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800542e:	f000 80a1 	beq.w	8005574 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fd f8eb 	bl	800260c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <UART_WaitOnFlagUntilTimeout+0x32>
 8005442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005444:	2b00      	cmp	r3, #0
 8005446:	d13e      	bne.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800545c:	667b      	str	r3, [r7, #100]	; 0x64
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005468:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800546c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e6      	bne.n	8005448 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	f023 0301 	bic.w	r3, r3, #1
 8005490:	663b      	str	r3, [r7, #96]	; 0x60
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800549a:	64ba      	str	r2, [r7, #72]	; 0x48
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e5      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e067      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d04f      	beq.n	8005574 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e2:	d147      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
 800550e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3308      	adds	r3, #8
 8005526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	613b      	str	r3, [r7, #16]
   return(result);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	66bb      	str	r3, [r7, #104]	; 0x68
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005540:	623a      	str	r2, [r7, #32]
 8005542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	69f9      	ldr	r1, [r7, #28]
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	61bb      	str	r3, [r7, #24]
   return(result);
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e010      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4013      	ands	r3, r2
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	429a      	cmp	r2, r3
 8005590:	f43f af4a 	beq.w	8005428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3770      	adds	r7, #112	; 0x70
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b096      	sub	sp, #88	; 0x58
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2222      	movs	r2, #34	; 0x22
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d02b      	beq.n	800562a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a40      	ldr	r2, [pc, #256]	; (80056d8 <UART_Start_Receive_DMA+0x138>)
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	4a3f      	ldr	r2, [pc, #252]	; (80056dc <UART_Start_Receive_DMA+0x13c>)
 80055e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	4a3e      	ldr	r2, [pc, #248]	; (80056e0 <UART_Start_Receive_DMA+0x140>)
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	2200      	movs	r2, #0
 80055f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3324      	adds	r3, #36	; 0x24
 80055fc:	4619      	mov	r1, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	461a      	mov	r2, r3
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	f7fd f987 	bl	8002918 <HAL_DMA_Start_IT>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2210      	movs	r2, #16
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e051      	b.n	80056ce <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005650:	64bb      	str	r3, [r7, #72]	; 0x48
 8005652:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800565e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e6      	bne.n	8005632 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005684:	637a      	str	r2, [r7, #52]	; 0x34
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800568a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	613b      	str	r3, [r7, #16]
   return(result);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b8:	623a      	str	r2, [r7, #32]
 80056ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	69f9      	ldr	r1, [r7, #28]
 80056be:	6a3a      	ldr	r2, [r7, #32]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3758      	adds	r7, #88	; 0x58
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	080058a7 	.word	0x080058a7
 80056dc:	080059c5 	.word	0x080059c5
 80056e0:	080059fd 	.word	0x080059fd

080056e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	; 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6979      	ldr	r1, [r7, #20]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	613b      	str	r3, [r7, #16]
   return(result);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e6      	bne.n	80056ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005724:	bf00      	nop
 8005726:	3724      	adds	r7, #36	; 0x24
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b095      	sub	sp, #84	; 0x54
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005756:	643b      	str	r3, [r7, #64]	; 0x40
 8005758:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800575c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	61fb      	str	r3, [r7, #28]
   return(result);
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	64bb      	str	r3, [r7, #72]	; 0x48
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800578a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d118      	bne.n	80057d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f023 0310 	bic.w	r3, r3, #16
 80057ba:	647b      	str	r3, [r7, #68]	; 0x44
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	613b      	str	r3, [r7, #16]
   return(result);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e6      	bne.n	80057a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80057ea:	bf00      	nop
 80057ec:	3754      	adds	r7, #84	; 0x54
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b090      	sub	sp, #64	; 0x40
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b20      	cmp	r3, #32
 800580a:	d037      	beq.n	800587c <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	623b      	str	r3, [r7, #32]
   return(result);
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005834:	633a      	str	r2, [r7, #48]	; 0x30
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	60fb      	str	r3, [r7, #12]
   return(result);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	617b      	str	r3, [r7, #20]
   return(result);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e6      	bne.n	8005848 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800587a:	e002      	b.n	8005882 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800587c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800587e:	f7fb ff0b 	bl	8001698 <HAL_UART_TxCpltCallback>
}
 8005882:	bf00      	nop
 8005884:	3740      	adds	r7, #64	; 0x40
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff fb6f 	bl	8004f7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b09c      	sub	sp, #112	; 0x70
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d070      	beq.n	800599e <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 80058bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058be:	2200      	movs	r2, #0
 80058c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80058e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	667b      	str	r3, [r7, #100]	; 0x64
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005916:	647a      	str	r2, [r7, #68]	; 0x44
 8005918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	623b      	str	r3, [r7, #32]
   return(result);
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	663b      	str	r3, [r7, #96]	; 0x60
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800594a:	633a      	str	r2, [r7, #48]	; 0x30
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	2220      	movs	r2, #32
 8005962:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005968:	2b01      	cmp	r3, #1
 800596a:	d118      	bne.n	800599e <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60fb      	str	r3, [r7, #12]
   return(result);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	69b9      	ldr	r1, [r7, #24]
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	617b      	str	r3, [r7, #20]
   return(result);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e6      	bne.n	800596c <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ac:	4619      	mov	r1, r3
 80059ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059b0:	f7ff fb02 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059b4:	e002      	b.n	80059bc <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80059b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059b8:	f7fb fe80 	bl	80016bc <HAL_UART_RxCpltCallback>
}
 80059bc:	bf00      	nop
 80059be:	3770      	adds	r7, #112	; 0x70
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d109      	bne.n	80059ee <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fae6 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059ec:	e002      	b.n	80059f4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff face 	bl	8004f90 <HAL_UART_RxHalfCpltCallback>
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d109      	bne.n	8005a38 <UART_DMAError+0x3c>
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b21      	cmp	r3, #33	; 0x21
 8005a28:	d106      	bne.n	8005a38 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005a32:	6978      	ldr	r0, [r7, #20]
 8005a34:	f7ff fe56 	bl	80056e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d109      	bne.n	8005a5a <UART_DMAError+0x5e>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b22      	cmp	r3, #34	; 0x22
 8005a4a:	d106      	bne.n	8005a5a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005a54:	6978      	ldr	r0, [r7, #20]
 8005a56:	f7ff fe6b 	bl	8005730 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a60:	f043 0210 	orr.w	r2, r3, #16
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f7ff fa9a 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a70:	bf00      	nop
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fa84 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb fdd4 	bl	8001698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005af0:	bf00      	nop
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <__cxa_pure_virtual>:
 8005b0c:	b508      	push	{r3, lr}
 8005b0e:	f000 f80d 	bl	8005b2c <_ZSt9terminatev>

08005b12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005b12:	b508      	push	{r3, lr}
 8005b14:	4780      	blx	r0
 8005b16:	f000 f80e 	bl	8005b36 <abort>
	...

08005b1c <_ZSt13get_terminatev>:
 8005b1c:	4b02      	ldr	r3, [pc, #8]	; (8005b28 <_ZSt13get_terminatev+0xc>)
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	f3bf 8f5b 	dmb	ish
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c

08005b2c <_ZSt9terminatev>:
 8005b2c:	b508      	push	{r3, lr}
 8005b2e:	f7ff fff5 	bl	8005b1c <_ZSt13get_terminatev>
 8005b32:	f7ff ffee 	bl	8005b12 <_ZN10__cxxabiv111__terminateEPFvvE>

08005b36 <abort>:
 8005b36:	b508      	push	{r3, lr}
 8005b38:	2006      	movs	r0, #6
 8005b3a:	f000 f871 	bl	8005c20 <raise>
 8005b3e:	2001      	movs	r0, #1
 8005b40:	f7fc fc8e 	bl	8002460 <_exit>

08005b44 <__errno>:
 8005b44:	4b01      	ldr	r3, [pc, #4]	; (8005b4c <__errno+0x8>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000010 	.word	0x20000010

08005b50 <__libc_init_array>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0d      	ldr	r6, [pc, #52]	; (8005b88 <__libc_init_array+0x38>)
 8005b54:	4c0d      	ldr	r4, [pc, #52]	; (8005b8c <__libc_init_array+0x3c>)
 8005b56:	1ba4      	subs	r4, r4, r6
 8005b58:	10a4      	asrs	r4, r4, #2
 8005b5a:	2500      	movs	r5, #0
 8005b5c:	42a5      	cmp	r5, r4
 8005b5e:	d109      	bne.n	8005b74 <__libc_init_array+0x24>
 8005b60:	4e0b      	ldr	r6, [pc, #44]	; (8005b90 <__libc_init_array+0x40>)
 8005b62:	4c0c      	ldr	r4, [pc, #48]	; (8005b94 <__libc_init_array+0x44>)
 8005b64:	f000 f960 	bl	8005e28 <_init>
 8005b68:	1ba4      	subs	r4, r4, r6
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	42a5      	cmp	r5, r4
 8005b70:	d105      	bne.n	8005b7e <__libc_init_array+0x2e>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b78:	4798      	blx	r3
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	e7ee      	b.n	8005b5c <__libc_init_array+0xc>
 8005b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b82:	4798      	blx	r3
 8005b84:	3501      	adds	r5, #1
 8005b86:	e7f2      	b.n	8005b6e <__libc_init_array+0x1e>
 8005b88:	080060d4 	.word	0x080060d4
 8005b8c:	080060d4 	.word	0x080060d4
 8005b90:	080060d4 	.word	0x080060d4
 8005b94:	080060dc 	.word	0x080060dc

08005b98 <memcpy>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	1e43      	subs	r3, r0, #1
 8005b9c:	440a      	add	r2, r1
 8005b9e:	4291      	cmp	r1, r2
 8005ba0:	d100      	bne.n	8005ba4 <memcpy+0xc>
 8005ba2:	bd10      	pop	{r4, pc}
 8005ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bac:	e7f7      	b.n	8005b9e <memcpy+0x6>

08005bae <memset>:
 8005bae:	4402      	add	r2, r0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d100      	bne.n	8005bb8 <memset+0xa>
 8005bb6:	4770      	bx	lr
 8005bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bbc:	e7f9      	b.n	8005bb2 <memset+0x4>
	...

08005bc0 <realloc>:
 8005bc0:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <realloc+0xc>)
 8005bc2:	460a      	mov	r2, r1
 8005bc4:	4601      	mov	r1, r0
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	f000 b8a0 	b.w	8005d0c <_realloc_r>
 8005bcc:	20000010 	.word	0x20000010

08005bd0 <_raise_r>:
 8005bd0:	291f      	cmp	r1, #31
 8005bd2:	b538      	push	{r3, r4, r5, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	460d      	mov	r5, r1
 8005bd8:	d904      	bls.n	8005be4 <_raise_r+0x14>
 8005bda:	2316      	movs	r3, #22
 8005bdc:	6003      	str	r3, [r0, #0]
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005be6:	b112      	cbz	r2, 8005bee <_raise_r+0x1e>
 8005be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bec:	b94b      	cbnz	r3, 8005c02 <_raise_r+0x32>
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f000 f830 	bl	8005c54 <_getpid_r>
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfe:	f000 b817 	b.w	8005c30 <_kill_r>
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d00a      	beq.n	8005c1c <_raise_r+0x4c>
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	d103      	bne.n	8005c12 <_raise_r+0x42>
 8005c0a:	2316      	movs	r3, #22
 8005c0c:	6003      	str	r3, [r0, #0]
 8005c0e:	2001      	movs	r0, #1
 8005c10:	e7e7      	b.n	8005be2 <_raise_r+0x12>
 8005c12:	2400      	movs	r4, #0
 8005c14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c18:	4628      	mov	r0, r5
 8005c1a:	4798      	blx	r3
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7e0      	b.n	8005be2 <_raise_r+0x12>

08005c20 <raise>:
 8005c20:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <raise+0xc>)
 8005c22:	4601      	mov	r1, r0
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	f7ff bfd3 	b.w	8005bd0 <_raise_r>
 8005c2a:	bf00      	nop
 8005c2c:	20000010 	.word	0x20000010

08005c30 <_kill_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4c07      	ldr	r4, [pc, #28]	; (8005c50 <_kill_r+0x20>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4605      	mov	r5, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	f7fc fbff 	bl	8002440 <_kill>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d102      	bne.n	8005c4c <_kill_r+0x1c>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	b103      	cbz	r3, 8005c4c <_kill_r+0x1c>
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	bd38      	pop	{r3, r4, r5, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000b54 	.word	0x20000b54

08005c54 <_getpid_r>:
 8005c54:	f7fc bbec 	b.w	8002430 <_getpid>

08005c58 <_malloc_r>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	1ccd      	adds	r5, r1, #3
 8005c5c:	f025 0503 	bic.w	r5, r5, #3
 8005c60:	3508      	adds	r5, #8
 8005c62:	2d0c      	cmp	r5, #12
 8005c64:	bf38      	it	cc
 8005c66:	250c      	movcc	r5, #12
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	db01      	blt.n	8005c72 <_malloc_r+0x1a>
 8005c6e:	42a9      	cmp	r1, r5
 8005c70:	d903      	bls.n	8005c7a <_malloc_r+0x22>
 8005c72:	230c      	movs	r3, #12
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	2000      	movs	r0, #0
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
 8005c7a:	f000 f87d 	bl	8005d78 <__malloc_lock>
 8005c7e:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <_malloc_r+0xac>)
 8005c80:	6814      	ldr	r4, [r2, #0]
 8005c82:	4621      	mov	r1, r4
 8005c84:	b991      	cbnz	r1, 8005cac <_malloc_r+0x54>
 8005c86:	4c20      	ldr	r4, [pc, #128]	; (8005d08 <_malloc_r+0xb0>)
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	b91b      	cbnz	r3, 8005c94 <_malloc_r+0x3c>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 f863 	bl	8005d58 <_sbrk_r>
 8005c92:	6020      	str	r0, [r4, #0]
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 f85e 	bl	8005d58 <_sbrk_r>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d124      	bne.n	8005cea <_malloc_r+0x92>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f868 	bl	8005d7a <__malloc_unlock>
 8005caa:	e7e4      	b.n	8005c76 <_malloc_r+0x1e>
 8005cac:	680b      	ldr	r3, [r1, #0]
 8005cae:	1b5b      	subs	r3, r3, r5
 8005cb0:	d418      	bmi.n	8005ce4 <_malloc_r+0x8c>
 8005cb2:	2b0b      	cmp	r3, #11
 8005cb4:	d90f      	bls.n	8005cd6 <_malloc_r+0x7e>
 8005cb6:	600b      	str	r3, [r1, #0]
 8005cb8:	50cd      	str	r5, [r1, r3]
 8005cba:	18cc      	adds	r4, r1, r3
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f000 f85c 	bl	8005d7a <__malloc_unlock>
 8005cc2:	f104 000b 	add.w	r0, r4, #11
 8005cc6:	1d23      	adds	r3, r4, #4
 8005cc8:	f020 0007 	bic.w	r0, r0, #7
 8005ccc:	1ac3      	subs	r3, r0, r3
 8005cce:	d0d3      	beq.n	8005c78 <_malloc_r+0x20>
 8005cd0:	425a      	negs	r2, r3
 8005cd2:	50e2      	str	r2, [r4, r3]
 8005cd4:	e7d0      	b.n	8005c78 <_malloc_r+0x20>
 8005cd6:	428c      	cmp	r4, r1
 8005cd8:	684b      	ldr	r3, [r1, #4]
 8005cda:	bf16      	itet	ne
 8005cdc:	6063      	strne	r3, [r4, #4]
 8005cde:	6013      	streq	r3, [r2, #0]
 8005ce0:	460c      	movne	r4, r1
 8005ce2:	e7eb      	b.n	8005cbc <_malloc_r+0x64>
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	6849      	ldr	r1, [r1, #4]
 8005ce8:	e7cc      	b.n	8005c84 <_malloc_r+0x2c>
 8005cea:	1cc4      	adds	r4, r0, #3
 8005cec:	f024 0403 	bic.w	r4, r4, #3
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	d005      	beq.n	8005d00 <_malloc_r+0xa8>
 8005cf4:	1a21      	subs	r1, r4, r0
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 f82e 	bl	8005d58 <_sbrk_r>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d0cf      	beq.n	8005ca0 <_malloc_r+0x48>
 8005d00:	6025      	str	r5, [r4, #0]
 8005d02:	e7db      	b.n	8005cbc <_malloc_r+0x64>
 8005d04:	200009f0 	.word	0x200009f0
 8005d08:	200009f4 	.word	0x200009f4

08005d0c <_realloc_r>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	4607      	mov	r7, r0
 8005d10:	4614      	mov	r4, r2
 8005d12:	460e      	mov	r6, r1
 8005d14:	b921      	cbnz	r1, 8005d20 <_realloc_r+0x14>
 8005d16:	4611      	mov	r1, r2
 8005d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d1c:	f7ff bf9c 	b.w	8005c58 <_malloc_r>
 8005d20:	b922      	cbnz	r2, 8005d2c <_realloc_r+0x20>
 8005d22:	f000 f82b 	bl	8005d7c <_free_r>
 8005d26:	4625      	mov	r5, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	f000 f874 	bl	8005e18 <_malloc_usable_size_r>
 8005d30:	42a0      	cmp	r0, r4
 8005d32:	d20f      	bcs.n	8005d54 <_realloc_r+0x48>
 8005d34:	4621      	mov	r1, r4
 8005d36:	4638      	mov	r0, r7
 8005d38:	f7ff ff8e 	bl	8005c58 <_malloc_r>
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0f2      	beq.n	8005d28 <_realloc_r+0x1c>
 8005d42:	4631      	mov	r1, r6
 8005d44:	4622      	mov	r2, r4
 8005d46:	f7ff ff27 	bl	8005b98 <memcpy>
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f000 f815 	bl	8005d7c <_free_r>
 8005d52:	e7e9      	b.n	8005d28 <_realloc_r+0x1c>
 8005d54:	4635      	mov	r5, r6
 8005d56:	e7e7      	b.n	8005d28 <_realloc_r+0x1c>

08005d58 <_sbrk_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4c06      	ldr	r4, [pc, #24]	; (8005d74 <_sbrk_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4605      	mov	r5, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	f7fc fb86 	bl	8002474 <_sbrk>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_sbrk_r+0x1a>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_sbrk_r+0x1a>
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000b54 	.word	0x20000b54

08005d78 <__malloc_lock>:
 8005d78:	4770      	bx	lr

08005d7a <__malloc_unlock>:
 8005d7a:	4770      	bx	lr

08005d7c <_free_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4605      	mov	r5, r0
 8005d80:	2900      	cmp	r1, #0
 8005d82:	d045      	beq.n	8005e10 <_free_r+0x94>
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f0c      	subs	r4, r1, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfb8      	it	lt
 8005d8e:	18e4      	addlt	r4, r4, r3
 8005d90:	f7ff fff2 	bl	8005d78 <__malloc_lock>
 8005d94:	4a1f      	ldr	r2, [pc, #124]	; (8005e14 <_free_r+0x98>)
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	4610      	mov	r0, r2
 8005d9a:	b933      	cbnz	r3, 8005daa <_free_r+0x2e>
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	6014      	str	r4, [r2, #0]
 8005da0:	4628      	mov	r0, r5
 8005da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da6:	f7ff bfe8 	b.w	8005d7a <__malloc_unlock>
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	d90c      	bls.n	8005dc8 <_free_r+0x4c>
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	1862      	adds	r2, r4, r1
 8005db2:	4293      	cmp	r3, r2
 8005db4:	bf04      	itt	eq
 8005db6:	681a      	ldreq	r2, [r3, #0]
 8005db8:	685b      	ldreq	r3, [r3, #4]
 8005dba:	6063      	str	r3, [r4, #4]
 8005dbc:	bf04      	itt	eq
 8005dbe:	1852      	addeq	r2, r2, r1
 8005dc0:	6022      	streq	r2, [r4, #0]
 8005dc2:	6004      	str	r4, [r0, #0]
 8005dc4:	e7ec      	b.n	8005da0 <_free_r+0x24>
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	b10a      	cbz	r2, 8005dd0 <_free_r+0x54>
 8005dcc:	42a2      	cmp	r2, r4
 8005dce:	d9fa      	bls.n	8005dc6 <_free_r+0x4a>
 8005dd0:	6819      	ldr	r1, [r3, #0]
 8005dd2:	1858      	adds	r0, r3, r1
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d10b      	bne.n	8005df0 <_free_r+0x74>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	4401      	add	r1, r0
 8005ddc:	1858      	adds	r0, r3, r1
 8005dde:	4282      	cmp	r2, r0
 8005de0:	6019      	str	r1, [r3, #0]
 8005de2:	d1dd      	bne.n	8005da0 <_free_r+0x24>
 8005de4:	6810      	ldr	r0, [r2, #0]
 8005de6:	6852      	ldr	r2, [r2, #4]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	4401      	add	r1, r0
 8005dec:	6019      	str	r1, [r3, #0]
 8005dee:	e7d7      	b.n	8005da0 <_free_r+0x24>
 8005df0:	d902      	bls.n	8005df8 <_free_r+0x7c>
 8005df2:	230c      	movs	r3, #12
 8005df4:	602b      	str	r3, [r5, #0]
 8005df6:	e7d3      	b.n	8005da0 <_free_r+0x24>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	1821      	adds	r1, r4, r0
 8005dfc:	428a      	cmp	r2, r1
 8005dfe:	bf04      	itt	eq
 8005e00:	6811      	ldreq	r1, [r2, #0]
 8005e02:	6852      	ldreq	r2, [r2, #4]
 8005e04:	6062      	str	r2, [r4, #4]
 8005e06:	bf04      	itt	eq
 8005e08:	1809      	addeq	r1, r1, r0
 8005e0a:	6021      	streq	r1, [r4, #0]
 8005e0c:	605c      	str	r4, [r3, #4]
 8005e0e:	e7c7      	b.n	8005da0 <_free_r+0x24>
 8005e10:	bd38      	pop	{r3, r4, r5, pc}
 8005e12:	bf00      	nop
 8005e14:	200009f0 	.word	0x200009f0

08005e18 <_malloc_usable_size_r>:
 8005e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1c:	1f18      	subs	r0, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bfbc      	itt	lt
 8005e22:	580b      	ldrlt	r3, [r1, r0]
 8005e24:	18c0      	addlt	r0, r0, r3
 8005e26:	4770      	bx	lr

08005e28 <_init>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr

08005e34 <_fini>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	bf00      	nop
 8005e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3a:	bc08      	pop	{r3}
 8005e3c:	469e      	mov	lr, r3
 8005e3e:	4770      	bx	lr
